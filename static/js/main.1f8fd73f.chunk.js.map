{"version":3,"sources":["constants.js","context/WeatherContext.js","components/Container/index.js","hooks/useWeather.js","containers/Search/Search.js","hooks/useLookup.js","hooks/useGeoLocation.js","components/Text/index.js","components/Icon/index.js","components/Tile/TileGroup.js","components/Tile/TileBody.js","components/Tile/index.js","containers/Weather/Weather.js","components/Grid/index.js","components/Card/Header.js","components/Card/Body.js","components/Card/Overlay.js","components/Card/index.js","components/Button/index.js","containers/Favorites/Favorites.js","containers/TopCities/TopCities.js","hooks/useCities.js","containers/Home/Home.js","containers/City/City.js","hooks/useForecast.js","App.js","index.js"],"names":["WEATHER_BASE_URL","ACTION_TYPES","initialState","weather","favorites","reducer","state","action","type","name","location","cityIndex","findIndex","city","sort","a","b","localeCompare","slice","WeatherStateContext","createContext","WeatherStateProvider","children","Provider","value","useReducer","Container","styled","div","useWeather","useState","setWeather","isFetchingCurrent","setIsFetchingCurrent","errorMessage","setErrorMessage","fetchCurrent","useCallback","query","params","access_key","process","axios","get","data","error","info","SearchWrapper","SearchContainer","SearchButton","button","SearchLocation","Search","history","useHistory","useContext","WeatherContext","dispatch","setQuery","results","setResults","isLookingUp","setIsLookingUp","errorLookupMsg","setErrorLookupMsg","lookup","useLookup","options","position","setPosition","setError","onSuccess","coords","latitude","longitude","onError","getPosition","geolocation","navigator","getCurrentPosition","useGeoLocation","debounceSearch","useMemo","debounce","useEffect","push","onSubmit","e","preventDefault","searchStr","target","focusInputOnSuggestionClick","inputProps","placeholder","onChange","newValue","suggestions","onSuggestionsFetchRequested","reason","cancel","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","getSuggestionValue","suggestion","region","country","renderSuggestion","size","icon","faSpinner","faSearch","spin","style","marginTop","textAlign","onClick","Text","span","props","primary","secondary","weight","Icon","FontAwesomeIcon","color","TileGroup","TileBody","Tile","Group","Body","PageHeader","header","PageBody","PageBodyLeft","PageBodyRight","SpanImage","Weather","console","log","current","Object","keys","length","Date","localtime_epoch","toDateString","favorite","solid","regular","alt","src","weather_icons","temperature","weather_descriptions","height","wind_speed","faWind","wind_dir","faCompass","pressure","faCloudscale","humidity","faWater","cloudcover","faCloud","feelslike","faTemperatureLow","Grid","FlexHeader","Header","title","subtitle","Overlay","Card","ButtonGroup","Button","Favorites","marginBottom","map","idx","key","faStar","className","TopCities","cities","setCities","isFetchingCities","setIsFetchingCities","errorCitiesMsg","setErrorCitiesMsg","fetchData","reduce","prev","curr","Name","join","sortedData","useCities","fav","getFavoritesName","cityIdx","renderCities","SegmentWrapper","Home","City","forecast","isFetchingForecast","setIsFetchingForecast","setErrorForecastMsg","forecast_days","useForecast","App","basename","exact","path","component","whyDidYouRender","React","onlyLogs","titleColor","diffNameColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f8fd73f.chunk.js","sourcesContent":["export const WEATHER_BASE_URL = 'https://api.weatherstack.com';\nexport const ACTION_TYPES = {\n  FETCH_WEATHER: 'FETCH_WEATHER',\n  TOGGLE_FAVORITES: 'TOGGLE_FAVORITES'\n};\n","import React, { createContext, useReducer } from 'react';\nimport { ACTION_TYPES } from '../constants';\n\nconst initialState = {\n  weather: {},\n  favorites: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_WEATHER: {\n      return {\n        ...state,\n        weather: action.weather\n      };\n    }\n    case ACTION_TYPES.TOGGLE_FAVORITES: {\n      const { name } = action.weather.location;\n      const cityIndex = state.favorites.findIndex(\n        (city) => city.location.name === name\n      );\n      // favorites must be unique\n      // then remove if selected again\n      if (cityIndex === -1) {\n        const favorites = [...state.favorites, action.weather].sort((a, b) =>\n          a.location.name.localeCompare(b.location.name)\n        );\n        return {\n          ...state,\n          favorites\n        };\n      } else {\n        return {\n          ...state,\n          favorites: [\n            ...state.favorites.slice(0, cityIndex),\n            ...state.favorites.slice(cityIndex + 1)\n          ]\n        };\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst WeatherStateContext = createContext();\n\nconst WeatherStateProvider = ({ children }) => {\n  return (\n    <WeatherStateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </WeatherStateContext.Provider>\n  );\n};\n\nexport default { WeatherStateContext, WeatherStateProvider };\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  padding: 10rem 20rem;\n`;\n\nexport default Container;\n","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useWeather() {\n  const [weather, setWeather] = useState({});\n  const [isFetchingCurrent, setIsFetchingCurrent] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const fetchCurrent = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsFetchingCurrent(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, {\n        params\n      });\n      if (data.error) {\n        setErrorMessage(data.error.info);\n      } else {\n        setWeather(data);\n      }\n    } catch (error) {\n      setErrorMessage(error);\n    } finally {\n      setIsFetchingCurrent(false);\n    }\n  }, []);\n\n  return {\n    weather,\n    isFetchingCurrent,\n    fetchCurrent,\n    errorMessage\n  };\n}\n","import React, { useContext, useEffect, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport Autosuggest from 'react-autosuggest';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\nimport useLookup from '../../hooks/useLookup';\nimport useWeather from '../../hooks/useWeather';\nimport { useGeoLocation } from '../../hooks/useGeoLocation';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nconst SearchWrapper = styled.div`\n  margin: 0 auto;\n  max-width: 60rem;\n`;\n\nconst SearchContainer = styled.div`\n  & {\n    display: flex;\n\n    & .react-autosuggest {\n      &__container {\n        flex: 1;\n        position: relative;\n      }\n\n      &__input {\n        border: 2px solid var(--color-lightgrey);\n        font-family: 'Fredoka One', cursive;\n        font-size: 2.5rem;\n        letter-spacing: 2px;\n        padding: 1rem 4rem 1rem 1rem;\n        outline: none;\n        transition: all 0.2s ease-in-out;\n        width: 100%;\n\n        &::placeholder {\n          color: var(--color-lightgrey);\n        }\n\n        &:focus {\n          border: 2px solid var(--color-lightslategrey);\n\n          &::placeholder {\n            color: var(--color-lightslategrey);\n          }\n        }\n\n        &--open {\n          border-bottom-left-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      &__suggestions {\n        &-container {\n          display: none;\n        }\n\n        &-container--open {\n          display: block;\n          position: absolute;\n          top: 6rem;\n          width: 100%;\n          border: 2px solid var(--color-lightslategrey);\n          background-color: #fff;\n          font-family: Raleway;\n          font-weight: 400;\n          font-size: 1.6rem;\n          z-index: 10;\n        }\n\n        &-list {\n          margin: 0;\n          padding: 0;\n          list-style-type: none;\n        }\n      }\n\n      &__suggestion {\n        cursor: pointer;\n        padding: 1rem 2rem;\n\n        &--highlighted {\n          background-color: var(--color-lightslategrey);\n        }\n      }\n    }\n  }\n`;\n\nconst SearchButton = styled.button`\n  background-color: transparent;\n  border: none;\n  margin-left: -3.5rem;\n  z-index: 10;\n  transition: all 0.2s ease-in-out;\n\n  &:active {\n    transform: translateY(5px);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SearchLocation = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n\n  > span {\n    font-family: Raleway;\n    font-size: 1.5rem;\n    font-weight: 600;\n    text-decoration: underline;\n  }\n`;\n\nfunction Search() {\n  const history = useHistory();\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n\n  const [query, setQuery] = useState('');\n\n  const { weather, isFetchingCurrent, fetchCurrent } = useWeather();\n  const { results, isLookingUp, lookup } = useLookup();\n  const { position, getPosition } = useGeoLocation();\n\n  const debounceSearch = useMemo(() => debounce(lookup, 400), [lookup]);\n\n  useEffect(() => {\n    dispatch({ type: ACTION_TYPES.FETCH_WEATHER, weather });\n  }, [weather, dispatch]);\n\n  useEffect(() => {\n    if (position) {\n      // we navigate to details page once\n      // user allows location access\n      history.push('/details', {\n        weather,\n        query,\n        position\n      });\n      // fetchCurrent(position);\n    }\n  }, [position, history, query, weather]);\n\n  const handleChange = (e, { newValue }) => {\n    setQuery(newValue);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchStr = e.target[0].value;\n    // call API if input is not blank\n    if (searchStr !== '') {\n      fetchCurrent(searchStr);\n    }\n  };\n  // populates the input value upon mouse/keyboard click\n  const getSuggestionValue = (suggestion) => {\n    return `${suggestion.name}, ${suggestion.region}, ${suggestion.country}`;\n  };\n  // renders the list of suggestions via dropdown container\n  const renderSuggestion = (suggestion) => {\n    return (\n      <span>{`${suggestion.name}, ${suggestion.region}, ${suggestion.country}`}</span>\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ reason, value }) => {\n    if (reason === 'input-changed') {\n      debounceSearch(value);\n    } else {\n      debounceSearch.cancel();\n    }\n  };\n  // triggers api call when clicking a city inside select options\n  // by default, this only works on keydown\n  const onSuggestionSelected = (e, { suggestionValue }) => {\n    if (e.type === 'click') {\n      fetchCurrent(suggestionValue);\n    }\n  };\n\n  return (\n    <SearchWrapper>\n      <form onSubmit={handleSubmit}>\n        <SearchContainer>\n          <Autosuggest\n            focusInputOnSuggestionClick={false}\n            inputProps={{\n              placeholder: 'Enter a city name',\n              onChange: handleChange,\n              value: query\n            }}\n            suggestions={results}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={() => {}}\n            onSuggestionSelected={onSuggestionSelected}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n          />\n          <SearchButton>\n            <FontAwesomeIcon\n              size=\"2x\"\n              icon={isLookingUp || isFetchingCurrent ? faSpinner : faSearch}\n              spin={isLookingUp || isFetchingCurrent}\n            />\n          </SearchButton>\n        </SearchContainer>\n      </form>\n      <div style={{ marginTop: '1rem', textAlign: 'center' }}>\n        <SearchLocation onClick={() => getPosition()}>\n          <span>Or use my location</span>\n        </SearchLocation>\n      </div>\n    </SearchWrapper>\n  );\n}\n\nexport default Search;\n","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useLookup() {\n  const [results, setResults] = useState([]);\n  const [isLookingUp, setIsLookingUp] = useState(false);\n  const [errorLookupMsg, setErrorLookupMsg] = useState({});\n\n  const lookup = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsLookingUp(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/autocomplete`, {\n        params\n      });\n      if (data.error) {\n        setErrorLookupMsg(data.error.info);\n      } else {\n        setResults(data.results);\n      }\n    } catch (error) {\n      setErrorLookupMsg(error);\n    } finally {\n      setIsLookingUp(false);\n    }\n  }, []);\n\n  return {\n    results,\n    setResults,\n    isLookingUp,\n    lookup,\n    errorLookupMsg\n  };\n}\n","import { useState, useCallback } from 'react';\n\nexport function useGeoLocation(options = {}) {\n  const [position, setPosition] = useState();\n  const [error, setError] = useState();\n\n  const onSuccess = (position) => {\n    const { latitude, longitude } = position.coords;\n    setPosition(`${latitude},${longitude}`);\n  };\n\n  const onError = (error) => {\n    setError(error);\n  };\n\n  const getPosition = useCallback(() => {\n    const { geolocation } = navigator;\n\n    if (!geolocation) {\n      setError('Geolocation is not supported.');\n      return;\n    }\n\n    geolocation.getCurrentPosition(onSuccess, onError, options);\n  }, [options]);\n\n  return {\n    position,\n    getPosition,\n    error\n  };\n}\n","import styled from 'styled-components';\n\nconst Text = styled.span`\n  ${(props) => props.primary && `font-family: 'Fredoka One'`};\n  ${(props) => props.secondary && `font-family: 'Raleway'`};\n  ${(props) => props.weight && `font-weight: ${props.weight}`};\n  ${(props) => props.size && `font-size: ${props.size}`};\n`;\n\nexport default Text;\n","import styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Icon = styled(FontAwesomeIcon)`\n  &&& {\n    cursor: 'pointer';\n    ${(props) => props.color && `color: ${props.color}`};\n  }\n`;\n\nexport default Icon;\n","import styled from 'styled-components';\n\nconst TileGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n  text-align: center;\n  align-items: center;\n`;\n\nexport default TileGroup;\n","import styled from 'styled-components';\n\nconst TileBody = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nexport default TileBody;\n","import styled from 'styled-components';\n\nimport TileGroup from './TileGroup';\nimport TileBody from './TileBody';\n\nconst Tile = styled.div`\n  display: inline-block;\n`;\n\nTile.Group = TileGroup;\nTile.Body = TileBody;\n\nexport default Tile;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport {\n  faStar as regular,\n  faCompass\n} from '@fortawesome/free-regular-svg-icons';\nimport {\n  faStar as solid,\n  faWind,\n  faWater,\n  faCloud,\n  faTemperatureLow\n} from '@fortawesome/free-solid-svg-icons';\nimport { faCloudscale } from '@fortawesome/free-brands-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// components\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Tile from '../../components/Tile';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nconst PageHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 2.5rem;\n\n  h2 {\n    margin-bottom: 1rem;\n  }\n`;\n\nconst PageBody = styled.div`\n  display: flex;\n`;\n\nconst PageBodyLeft = styled.div`\n  display: flex;\n  flex-basis: 40%;\n  justify-content: space-evenly;\n`;\n\nconst PageBodyRight = styled.div`\n  flex: 1;\n`;\n\nconst SpanImage = styled.span`\n  align-self: flex-end;\n\n  & > img {\n    border-radius: 10rem;\n    height: 12rem;\n    width: 12rem;\n  }\n`;\n\nfunction Weather() {\n  const [{ weather, favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  console.log(weather);\n  const { current, location } = weather;\n\n  const getCityName = () => {\n    return `${location.name}, ${location.country}`;\n  };\n\n  const getCurrentDate = () => {\n    return new Date(location.localtime_epoch * 1000).toDateString();\n  };\n\n  const isFavorite = () => {\n    const idx = favorites.findIndex(\n      (favorite) => favorite.location.name === location.name\n    );\n    return idx !== -1;\n  };\n\n  if (Object.keys(weather).length === 0) return null;\n\n  return (\n    <>\n      <PageHeader>\n        <div>\n          <h2>\n            <Text size=\"3rem\" primary>\n              {getCityName()}\n            </Text>\n          </h2>\n          <p>\n            <Text weight=\"300\" size=\"2.5rem\" secondary>\n              {getCurrentDate()}\n            </Text>\n          </p>\n        </div>\n        <span\n          onClick={() =>\n            dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather })\n          }\n        >\n          <Icon\n            color=\"orange\"\n            icon={isFavorite() ? solid : regular}\n            size=\"3x\"\n          />\n        </span>\n      </PageHeader>\n      <PageBody>\n        <PageBodyLeft>\n          <SpanImage>\n            <img alt=\"weather icon\" src={current.weather_icons[0]} />\n          </SpanImage>\n          <div>\n            <h3>\n              <Text size=\"10rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </h3>\n            <h4>\n              <Text size=\"2.5rem\" weight=\"400\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </h4>\n          </div>\n        </PageBodyLeft>\n        <PageBodyRight>\n          <Tile.Group style={{ height: '100%' }}>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Wind Speed\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>\n                  {`${current.wind_speed} km/h`}\n                </Text>\n              </Tile.Body>\n              <Icon icon={faWind} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Wind Direction\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>\n                  {`${current.wind_dir}`}\n                </Text>\n              </Tile.Body>\n              <Icon icon={faCompass} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Pressure\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.pressure} mb`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloudscale} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Humidity\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.humidity} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faWater} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Cloud Cover\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.cloudcover} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloud} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Feels like\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${\n                  current.feelslike\n                } ${'\\u00b0'}C`}</Text>\n              </Tile.Body>\n              <Icon icon={faTemperatureLow} size=\"4x\" />\n            </Tile>\n          </Tile.Group>\n        </PageBodyRight>\n      </PageBody>\n    </>\n  );\n}\n\nexport default Weather;\n","import styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Text from '../Text';\n\nconst FlexHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nfunction Header({ title, subtitle, children }) {\n  return (\n    <FlexHeader>\n      <div>\n        <h2>\n          <Text size=\"2rem\" primary>\n            {title}\n          </Text>\n        </h2>\n        <p>\n          <Text size=\"1.5rem\" weight=\"200\" secondary>\n            {subtitle}\n          </Text>\n        </p>\n      </div>\n      {children}\n    </FlexHeader>\n  );\n}\n\nexport default Header;\n","import styled from 'styled-components';\n\nconst Body = styled.div``;\n\nexport default Body;\n","import styled from 'styled-components';\n\nconst Overlay = styled.div`\n  background: #fff;\n  padding: 0 1rem;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  top: 100%;\n  transition: all 0.2s ease-out;\n`;\n\nexport default Overlay;\n","import styled from 'styled-components';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Overlay from './Overlay';\n\nconst Card = styled.div`\n  border: 1px solid grey;\n  padding: 1rem;\n  position: relative;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    border: 1px solid deepskyblue;\n    transform: translateY(-10px);\n    .overlay {\n      opacity: 0.8;\n      top: 40%;\n    }\n  }\n`;\n\nCard.Header = Header;\nCard.Body = Body;\nCard.Overlay = Overlay;\n\nexport default Card;\n","import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: center;\n  height: 100%;\n\n  & > button:first-child {\n    margin-bottom: 5px;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: 1px solid slategray;\n  border-radius: 5rem;\n  font-size: 1.2rem;\n  padding: 5px 8px;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    border: 1px solid deepskyblue;\n    color: deepskyblue;\n  }\n\n  &:active {\n    transform: translateY(5px);\n  }\n`;\n\nButton.Group = ButtonGroup;\n\nexport default Button;\n","import React, { useContext } from 'react';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\nimport Text from '../../components/Text';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nfunction Favorites() {\n  const [{ favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const history = useHistory();\n\n  const renderFavorites = () => {\n    return favorites.map((favorite, idx) => {\n      const { current, location } = favorite;\n      return (\n        <Card key={idx}>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <span\n              onClick={() =>\n                dispatch({\n                  type: ACTION_TYPES.TOGGLE_FAVORITES,\n                  weather: favorite\n                })\n              }\n            >\n              <Icon color=\"orange\" icon={faStar} size=\"2x\" />\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button onClick={() => history.push('/details', {\n                weather: favorite,\n                query: location.name\n              })}>\n                Learn more\n              </Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  if (favorites.length === 0) return null;\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>{`Favorites (${favorites.length})`}</Text>\n        </h2>\n      </div>\n      <Grid>{renderFavorites()}</Grid>\n    </>\n  );\n}\n\nexport default Favorites;\n","import React, { useContext } from 'react';\nimport { faStar as regular } from '@fortawesome/free-regular-svg-icons';\nimport { faStar as solid } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useCities from '../../hooks/useCities';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\n// @TODO add list of cities in context\n\nfunction TopCities() {\n  const [{ favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n\n  const { cities, setCities } = useCities();\n\n  const getFavoritesName = () => {\n    let lookup = {};\n    for (let city of favorites) {\n      lookup[city.location.name] = city.location.name;\n    }\n    return lookup;\n  };\n\n  const handleRemoveCity = (cityIdx) => {\n    setCities([...cities.slice(0, cityIdx), ...cities.slice(cityIdx + 1)]);\n  };\n\n  const renderCities = () => {\n    const fav = getFavoritesName();\n\n    return cities.map((city, idx) => {\n      const { current, location } = city;\n      return (\n        <Card key={idx}>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <span\n              onClick={() =>\n                dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: city })\n              }\n            >\n              <Icon\n                color=\"orange\"\n                icon={fav[location.name] ? solid : regular}\n                size=\"2x\"\n              />\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button>Learn more</Button>\n              <Button onClick={() => handleRemoveCity(idx)}>Remove</Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  if (cities.length === 0) return null;\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>\n            Top 15 cities by population (A-Z)\n          </Text>\n        </h2>\n      </div>\n      <Grid>{renderCities()}</Grid>\n    </>\n  );\n}\n\nexport default TopCities;\n","import { useState } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useCities() {\n  const [cities, setCities] = useState([]);\n  const [isFetchingCities, setIsFetchingCities] = useState(false);\n  const [errorCitiesMsg, setErrorCitiesMsg] = useState();\n\n  const fetchData = async () => {\n    const { data: cities } = await axios.get('cities.json');\n    const query = cities\n      .reduce((prev, curr) => [...prev, curr.Name], [])\n      .join(';');\n\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsFetchingCities(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, { params });\n      // const data = [];\n      const sortedData = data.sort((a, b) =>\n        a.location.name.localeCompare(b.location.name)\n      );\n      setCities(sortedData);\n    } catch (error) {\n      setErrorCitiesMsg(error);\n    } finally {\n      setIsFetchingCities(false);\n    }\n  };\n\n  useState(() => {\n    if (cities.length === 0) {\n      fetchData();\n    }\n  }, []);\n\n  return {\n    cities,\n    setCities,\n    isFetchingCities,\n    errorCitiesMsg\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\n// components\nimport Container from '../../components/Container';\nimport Search from '../Search';\nimport Weather from '../Weather';\nimport Favorites from '../Favorites';\nimport TopCities from '../TopCities';\n\nconst SegmentWrapper = styled.div`\n  margin-bottom: 2.5rem;\n`;\n\nfunction Home() {\n  return (\n    <Container>\n      <SegmentWrapper>\n        <header>\n          <Search />\n        </header>\n      </SegmentWrapper>\n      <main>\n        <SegmentWrapper>\n          <Weather />\n        </SegmentWrapper>\n        <SegmentWrapper>\n          <Favorites />\n        </SegmentWrapper>\n        <SegmentWrapper>\n          <TopCities />\n        </SegmentWrapper>\n      </main>\n    </Container>\n  );\n}\n\nexport default Home;\n","import React, { useContext, useEffect } from 'react';\n// hooks\nimport useForecast from '../../hooks/useForecast';\nimport useWeather from '../../hooks/useWeather';\n// components\nimport Container from '../../components/Container';\nimport Weather from '../Weather';\nimport { ACTION_TYPES } from '../../constants';\nimport WeatherContext from '../../context/WeatherContext';\n\nfunction City(props) {\n  const { query, position } = props.history.location.state;\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n  const { forecast, isFetchingForecast } = useForecast(query);\n  const { weather, isFetchingCurrent, fetchCurrent } = useWeather();\n\n  useEffect(() => {\n    if (query) {\n      fetchCurrent(query);\n    }\n    if (position) {\n      fetchCurrent(position);\n    }\n  }, [fetchCurrent, query, position]);\n\n  useEffect(() => {\n    dispatch({ type: ACTION_TYPES.FETCH_WEATHER, weather });\n  }, [weather, dispatch]);\n\n  return (\n    <Container>\n      <Weather />\n    </Container>\n  );\n}\n\nexport default City;\n","import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useForecast(query) {\n  const [forecast, setForecast] = useState([]);\n  const [isFetchingForecast, setIsFetchingForecast] = useState(false);\n  const [errorForecastMsg, setErrorForecastMsg] = useState('');\n\n  const fetchData = useCallback(async () => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      forecast_days: 7,\n      query\n    };\n\n    try {\n      setIsFetchingForecast(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/forecast`, { params });\n      console.log(data);\n    } catch (error) {\n      setErrorForecastMsg(error);\n    } finally {\n      setIsFetchingForecast(false);\n    }\n  }, [query]);\n\n  useEffect(() => {\n    fetchData(query);\n  }, [fetchData, query]);\n\n  return {\n    forecast,\n    isFetchingForecast\n  };\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// context\nimport WeatherContext from './context/WeatherContext';\n// components\nimport Home from './containers/Home';\nimport City from './containers/City';\n// @todo add 404 catch all route\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL + '/'}>\n      <WeatherContext.WeatherStateProvider>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/details\" component={City} />\n        </Switch>\n      </WeatherContext.WeatherStateProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport whyDidYouRender from '@welldone-software/why-did-you-render';\n\nimport './index.css';\nimport App from './App';\n\nwhyDidYouRender(React, {\n  onlyLogs: true,\n  titleColor: 'green',\n  diffNameColor: 'darkturquoise'\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}