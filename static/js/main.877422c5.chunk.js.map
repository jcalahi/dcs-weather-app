{"version":3,"sources":["constants.js","context/WeatherContext.js","components/Container/Panel.js","utils.js","components/Container/index.js","hooks/useWeather.js","components/Snackbar/index.js","components/Text/index.js","components/Icon/index.js","containers/Search/Search.js","hooks/useLookup.js","hooks/useGeoLocation.js","components/Tile/TileGroup.js","components/Tile/TileBody.js","components/Tile/index.js","components/Empty/index.js","components/Weather/index.js","containers/CityWeather/CityWeather.js","components/Grid/index.js","components/Card/Header.js","components/Card/Body.js","components/Card/Overlay.js","components/Card/index.js","components/Button/index.js","components/Header/index.js","containers/Favorites/Favorites.js","containers/TopCities/TopCities.js","hooks/useCities.js","routes/HomePage/HomePage.js","containers/Forecast/index.js","hooks/useForecast.js","components/TextArea/index.js","containers/Notes/index.js","routes/CityPage/CityPage.js","components/PageNotFound/index.js","App.js","index.js"],"names":["WEATHER_BASE_URL","WEEKDAYS","ACTION_TYPES","SEARCH_RESULT","SET_WEATHER_CURRENT","SET_WEATHER_FORECAST","ADD_CITIES","REMOVE_CITY","TOGGLE_FAVORITES","LOADING_CITIES","LOADING_WEATHER","ADD_NOTE","REMOVE_NOTE","EDIT_NOTE","breakpoints","xxs","xs","sm","md","lg","xl","initialState","searchResult","weather","cities","favorites","notes","loadingCities","loadingWeather","allCitiesRemoved","reducer","state","action","type","error","slice","cityIdx","length","name","location","cityIndex","findIndex","city","sort","a","b","localeCompare","loading","payload","filteredNotes","filter","note","id","idx","editedAt","WeatherStateContext","createContext","WeatherStateProvider","children","Provider","value","useReducer","Panel","styled","div","respondTo","Object","keys","reduce","accumulator","label","css","Container","useWeather","useContext","WeatherContext","dispatch","useState","errorMessage","setErrorMessage","fetchWeather","useCallback","query","actionType","params","access_key","process","axios","get","data","info","window","localStorage","setItem","JSON","stringify","store","getItem","parse","Snackbar","props","show","propTypes","string","Text","span","primary","secondary","weight","size","bool","StyledSpan","color","hover","Icon","icon","onIconClick","spin","onClick","SearchWrapper","SearchContainer","SearchButton","button","SearchLocation","Search","setQuery","history","useHistory","isLoadingWeather","results","setResults","isLookingUp","setIsLookingUp","errorLookupMsg","setErrorLookupMsg","lookup","toString","useLookup","options","position","setPosition","setError","isLoadingPosition","setIsLoadingPosition","onSuccess","coords","latitude","longitude","onError","getPosition","geolocation","navigator","getCurrentPosition","useGeoLocation","debounceSearch","useMemo","debounce","useEffect","push","onSubmit","e","preventDefault","str","target","split","focusInputOnSuggestionClick","inputProps","placeholder","onChange","newValue","suggestions","onSuggestionsFetchRequested","reason","cancel","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","getSuggestionValue","suggestion","region","country","renderSuggestion","faSpinner","faSearch","faTimes","style","marginTop","textAlign","TileGroup","TileBody","Tile","Group","Body","Empty","text","PageHeader","header","PageBody","PageBodyLeft","PageBodyRight","SpanImage","Weather","onToggleFavorites","current","faSun","display","Date","localtime_epoch","toDateString","favorite","solid","regular","alt","src","weather_icons","temperature","weather_descriptions","height","wind_speed","faWind","wind_dir","faCompass","pressure","faCloudscale","humidity","faWater","cloudcover","faCloud","feelslike","faTemperatureLow","CityWeather","source","Grid","FlexHeader","Header","title","subtitle","minHeight","Overlay","Card","ButtonIcon","ButtonGroup","Button","Favorites","faFolderOpen","map","key","faStar","className","TopCities","fetchCities","errorCitiesMsg","setErrorCitiesMsg","topCities","cityPopulation","Name","population","Population","rank","prev","curr","join","sortedCities","withPopulation","useCities","fav","getFavoritesName","addComma","replace","renderCities","HomePage","marginBottom","Forecast","forecast","setForecast","isLoadingForecoast","setIsLoadingForecast","errorForecastMsg","setErrorForecastMsg","fetchData","forecast_days","useForecast","cityData","dates","day","date","getDay","justifyContent","flex","avgtemp","flexDirection","alignItems","maxtemp","mintemp","astro","sunrise","faMoon","moonrise","renderForecast","TextArea","onBlur","setText","resize","width","rows","NotesHeader","Notes","renderNotes","item","dateCreated","faTrashAlt","toLocaleTimeString","createdAt","uniqueId","toLocaleDateString","faPlus","checkNotesContent","CityPage","faChevronLeft","marginLeft","Page404","PageNotFound","App","basename","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.877422c5.chunk.js","sourcesContent":["export const WEATHER_BASE_URL = 'https://api.weatherstack.com';\nexport const WEEKDAYS = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n];\nexport const ACTION_TYPES = {\n  SEARCH_RESULT: 'SEARCH_RESULT',\n  SET_WEATHER_CURRENT: 'SET_WEATHER_CURRENT',\n  SET_WEATHER_FORECAST: 'SET_WEATHER_FORECAST',\n  ADD_CITIES: 'ADD_CITIES',\n  REMOVE_CITY: 'REMOVE_CITY',\n  TOGGLE_FAVORITES: 'TOGGLE_FAVORITES',\n  LOADING_CITIES: 'LOADING_CITIES',\n  LOADING_WEATHER: 'LOADING_WEATHER',\n  ADD_NOTE: 'ADD_NOTE',\n  REMOVE_NOTE: 'REMOVE_NOTE',\n  EDIT_NOTE: 'EDIT_NOTE'\n};\nexport const breakpoints = {\n  xxs: '320px',\n  xs: '480',\n  sm: '768px',\n  md: '992px',\n  lg: '1200px',\n  xl: '1600px'\n};\n","import React, { createContext, useReducer } from 'react';\nimport { ACTION_TYPES } from '../constants';\n\nexport const initialState = {\n  searchResult: {}, // weather data from searching\n  weather: {}, // weather data from clicking a card/city\n  cities: [],\n  favorites: [],\n  notes: [],\n  loadingCities: false,\n  loadingWeather: false,\n  allCitiesRemoved: false\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.SEARCH_RESULT: {\n      return {\n        ...state,\n        searchResult: action.weather\n      };\n    }\n    case ACTION_TYPES.SET_WEATHER_CURRENT: {\n      return {\n        ...state,\n        weather: action.weather\n      };\n    }\n    case ACTION_TYPES.ADD_CITIES: {\n      return {\n        ...state,\n        cities: action.cities,\n        error: action.error\n      };\n    }\n    case ACTION_TYPES.REMOVE_CITY: {\n      return {\n        ...state,\n        cities: [\n          ...state.cities.slice(0, action.cityIdx),\n          ...state.cities.slice(action.cityIdx + 1)\n        ],\n        allCitiesRemoved: state.cities.length === 1\n      };\n    }\n    case ACTION_TYPES.TOGGLE_FAVORITES: {\n      const { name } = action.weather.location;\n      const cityIndex = state.favorites.findIndex(\n        (city) => city.location.name === name\n      );\n      // favorites must be unique\n      // then remove if selected again\n      if (cityIndex === -1) {\n        const favorites = [...state.favorites, action.weather].sort((a, b) =>\n          a.location.name.localeCompare(b.location.name)\n        );\n        return {\n          ...state,\n          favorites\n        };\n      } else {\n        return {\n          ...state,\n          favorites: [\n            ...state.favorites.slice(0, cityIndex),\n            ...state.favorites.slice(cityIndex + 1)\n          ]\n        };\n      }\n    }\n    case ACTION_TYPES.LOADING_CITIES: {\n      return {\n        ...state,\n        loadingCities: action.loading\n      };\n    }\n    case ACTION_TYPES.LOADING_WEATHER: {\n      return {\n        ...state,\n        loadingWeather: action.loading\n      };\n    }\n    case ACTION_TYPES.ADD_NOTE: {\n      return {\n        ...state,\n        notes: [...state.notes, action.payload]\n      };\n    }\n    case ACTION_TYPES.REMOVE_NOTE: {\n      const filteredNotes = state.notes.filter(\n        (note) => note.id !== action.payload.id\n      );\n      return {\n        ...state,\n        notes: filteredNotes\n      };\n    }\n    case ACTION_TYPES.EDIT_NOTE: {\n      const idx = state.notes.findIndex(\n        (note) => note.id === action.payload.id\n      );\n      return {\n        ...state,\n        notes: [\n          ...state.notes.slice(0, idx),\n          {\n            ...state.notes[idx],\n            note: action.payload.note,\n            editedAt: action.payload.editedAt\n          },\n          ...state.notes.slice(idx + 1)\n        ]\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst WeatherStateContext = createContext();\n\nconst WeatherStateProvider = ({ children }) => {\n  return (\n    <WeatherStateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </WeatherStateContext.Provider>\n  );\n};\n\nexport default { WeatherStateContext, WeatherStateProvider };\n","import styled from 'styled-components';\n\nconst Panel = styled.div`\n  margin-bottom: 2.5rem;\n`;\n\nexport default Panel;\n","import { css } from 'styled-components';\nimport { breakpoints } from './constants';\n\nexport const respondTo = Object.keys(breakpoints).reduce(\n  (accumulator, label) => {\n    accumulator[label] = (...args) => css`\n      @media only screen and (min-device-width: ${breakpoints[label]}) {\n        ${css(...args)};\n      }\n    `;\n    return accumulator;\n  },\n  {}\n);\n","import styled from 'styled-components';\n\nimport Panel from './Panel';\nimport { respondTo } from '../../utils';\n\nconst Container = styled.div`\n  margin-top: 1.5rem;\n\n  ${respondTo.xxs`padding: 0 1rem;`}\n  ${respondTo.sm`padding: 0 2rem;`}\n  ${respondTo.lg`padding: 0 20rem;`}\n`;\n\nContainer.Panel = Panel;\n\nexport default Container;\n","import { useState, useCallback, useContext } from 'react';\nimport axios from 'axios';\n\nimport WeatherContext from '../context/WeatherContext';\n\nimport { WEATHER_BASE_URL, ACTION_TYPES } from '../constants';\n\nexport default function useWeather() {\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const fetchWeather = useCallback(\n    async (query, actionType) => {\n      const params = {\n        access_key: process.env.REACT_APP_WEATHER_API_KEY,\n        query\n      };\n\n      try {\n        dispatch({ type: ACTION_TYPES.LOADING_WEATHER, loading: true });\n        const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, {\n          params\n        });\n\n        dispatch({ type: ACTION_TYPES.LOADING_WEATHER, loading: false });\n        if (data.error) {\n          setErrorMessage(data.error.info);\n        } else {\n          // store for offline reference\n          ACTION_TYPES[actionType] === 'SEARCH_RESULT'\n            ? window.localStorage.setItem('storedSearch', JSON.stringify(data))\n            : window.localStorage.setItem(\n                'storedWeather',\n                JSON.stringify(data)\n              );\n          dispatch({ type: ACTION_TYPES[actionType], weather: data });\n        }\n      } catch (error) {\n        const store = window.localStorage.getItem('storedWeather');\n\n        dispatch({ type: ACTION_TYPES.LOADING_WEATHER, loading: false });\n        dispatch({\n          type: ACTION_TYPES[actionType],\n          weather: JSON.parse(store)\n        });\n        setErrorMessage(error);\n      }\n    },\n    [dispatch]\n  );\n  return {\n    fetchWeather,\n    errorMessage\n  };\n}\n","import styled from 'styled-components';\nimport { string } from 'prop-types';\n\nconst Snackbar = styled.div`\n  background-color: #fffaf3;\n  box-shadow: 0 0 0 1px #c9ba9b inset, 0 0 0 0 transparent;\n  display: none;\n  color: #573a08;\n  padding: 1.6rem;\n  position: fixed;\n  top: 3%;\n  right: 2%;\n  width: 35rem;\n  width: 35rem;\n\n  ${(props) => props.show && `display: flex;`}\n`;\n\nSnackbar.propTypes = {\n  show: string\n};\n\nexport default Snackbar;\n","import styled from 'styled-components';\nimport { string, bool } from 'prop-types';\nimport { respondTo } from '../../utils';\n\nconst Text = styled.span`\n  ${(props) => props.primary && `font-family: 'Fredoka One'`};\n  ${(props) => props.secondary && `font-family: 'Raleway'`};\n  ${(props) => props.weight && `font-weight: ${props.weight}`};\n  ${(props) => props.size && `font-size: ${props.size}`};\n\n  ${(props) =>\n    !props.size && props.primary && respondTo.xxs`font-size: 1.2rem;`};\n  ${(props) =>\n    !props.size && props.primary && respondTo.xs`font-size: 1.4rem;`};\n  ${(props) =>\n    !props.size && props.primary && respondTo.sm`font-size: 1.6rem;`};\n  ${(props) => !props.size && props.primary && respondTo.md`font-size: 2rem;`};\n  ${(props) =>\n    !props.size && props.primary && respondTo.lg`font-size: 2.2rem;`};\n\n  ${(props) =>\n    !props.size && props.secondary && respondTo.xxs`font-size: 1.4rem;`};\n  ${(props) =>\n    !props.size && props.secondary && respondTo.xs`font-size: 1.6rem;`};\n  ${(props) =>\n    !props.size && props.secondary && respondTo.sm`font-size: 1.8rem;`};\n  ${(props) =>\n    !props.size && props.secondary && respondTo.md`font-size: 2rem;`};\n  ${(props) =>\n    !props.size && props.secondary && respondTo.lg`font-size: 2.4rem;`};\n`;\n\nText.propTypes = {\n  primary: bool,\n  secondary: bool,\n  size: string,\n  weight: string\n};\n\nexport default Text;\n","import React from 'react';\nimport { bool, string, object, func } from 'prop-types';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst StyledSpan = styled.span`\n  display: inline-block;\n\n  ${(props) => props.color && `color: ${props.color}`};\n  ${(props) => props.hover && `cursor: pointer`};\n`;\n\nfunction Icon({ color, icon, size, onIconClick, hover, spin }) {\n  return (\n    <StyledSpan color={color} onClick={onIconClick} hover={hover}>\n      <FontAwesomeIcon icon={icon} size={size} spin={spin} />\n    </StyledSpan>\n  );\n}\n\nIcon.propTypes = {\n  color: string,\n  icon: object,\n  size: string,\n  onIconClick: func,\n  hover: bool,\n  spin: bool\n};\n\nexport default Icon;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport Autosuggest from 'react-autosuggest';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faSearch,\n  faSpinner,\n  faTimes\n} from '@fortawesome/free-solid-svg-icons';\n// hooks\nimport { useHistory } from 'react-router-dom';\nimport useLookup from '../../hooks/useLookup';\nimport useWeather from '../../hooks/useWeather';\nimport { useGeoLocation } from '../../hooks/useGeoLocation';\n// useEffect\nimport Snackbar from '../../components/Snackbar';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport { ACTION_TYPES } from '../../constants';\n\nconst SearchWrapper = styled.div`\n  margin: 0 auto;\n  max-width: 60rem;\n`;\n\nconst SearchContainer = styled.div`\n  & {\n    display: flex;\n\n    & .react-autosuggest {\n      &__container {\n        flex: 1;\n        position: relative;\n      }\n\n      &__input {\n        border: 2px solid grey;\n        font-family: Raleway, sans-serif;\n        font-size: 2rem;\n        letter-spacing: 1.5px;\n        padding: 1rem 4rem 1rem 1rem;\n        outline: none;\n        transition: all 0.2s ease-in-out;\n        width: 100%;\n\n        &::placeholder {\n          color: grey;\n        }\n\n        &:focus {\n          border: 2px solid lightseagreen;\n\n          &::placeholder {\n            color: lightseagreen;\n          }\n        }\n\n        &--open {\n          border-bottom-left-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      &__suggestions {\n        &-container {\n          display: none;\n        }\n\n        &-container--open {\n          display: block;\n          position: absolute;\n          top: 6rem;\n          width: 100%;\n          border: 2px solid lightseagreen;\n          background-color: #fff;\n          font-family: Raleway;\n          font-weight: 400;\n          font-size: 1.6rem;\n          z-index: 10;\n        }\n\n        &-list {\n          margin: 0;\n          padding: 0;\n          list-style-type: none;\n        }\n      }\n\n      &__suggestion {\n        cursor: pointer;\n        padding: 1rem 2rem;\n\n        &--highlighted {\n          background-color: #eee;\n        }\n      }\n    }\n  }\n`;\n\nconst SearchButton = styled.button`\n  background-color: transparent;\n  border: none;\n  margin-left: -3.5rem;\n  z-index: 10;\n  transition: all 0.2s ease-in-out;\n\n  &:active {\n    transform: translateY(5px);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SearchLocation = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n\n  > span {\n    font-family: Raleway;\n    font-size: 1.5rem;\n    font-weight: 600;\n    text-decoration: underline;\n  }\n`;\n\nfunction Search() {\n  const [query, setQuery] = useState('');\n\n  const history = useHistory();\n  const { fetchWeather, isLoadingWeather } = useWeather();\n  const {\n    results,\n    isLookingUp,\n    lookup,\n    errorLookupMsg,\n    setErrorLookupMsg\n  } = useLookup();\n  const { isLoadingPosition, position, getPosition } = useGeoLocation();\n  const debounceSearch = useMemo(() => debounce(lookup, 400), [lookup]);\n\n  useEffect(() => {\n    if (position && !isLoadingPosition) {\n      // we navigate to details page once\n      // user allows location access\n      history.push('/details', {\n        query: position\n      });\n    }\n  }, [position, history, query, isLoadingPosition]);\n\n  const handleChange = (e, { newValue }) => {\n    setQuery(newValue);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchStr = e.target[0].value;\n    const str = searchStr.split(';')[0];\n    // call API if input is not blank\n    if (str !== '') {\n      fetchWeather(str, ACTION_TYPES.SEARCH_RESULT);\n    }\n  };\n  // populates the input value upon mouse/keyboard click\n  const getSuggestionValue = (suggestion) => {\n    return `${suggestion.name}, ${suggestion.region}, ${suggestion.country}`;\n  };\n  // renders the list of suggestions via dropdown container\n  const renderSuggestion = (suggestion) => {\n    return (\n      <span>{`${suggestion.name}, ${suggestion.region}, ${suggestion.country}`}</span>\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ reason, value }) => {\n    if (reason === 'input-changed') {\n      debounceSearch(value);\n    } else {\n      debounceSearch.cancel();\n    }\n  };\n  // triggers api call when clicking a city inside select options\n  // by default, this only works on keydown\n  const onSuggestionSelected = (e, { suggestionValue }) => {\n    if (e.type === 'click') {\n      fetchWeather(suggestionValue, ACTION_TYPES.SEARCH_RESULT);\n    }\n  };\n\n  return (\n    <SearchWrapper>\n      <form onSubmit={handleSubmit}>\n        <SearchContainer>\n          <Autosuggest\n            focusInputOnSuggestionClick={false}\n            inputProps={{\n              placeholder: 'Enter a city name',\n              onChange: handleChange,\n              value: query\n            }}\n            suggestions={results}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={() => {}}\n            onSuggestionSelected={onSuggestionSelected}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n          />\n          <SearchButton>\n            <FontAwesomeIcon\n              size=\"2x\"\n              icon={\n                isLookingUp || isLoadingWeather || isLoadingPosition\n                  ? faSpinner\n                  : faSearch\n              }\n              spin={isLookingUp || isLoadingWeather || isLoadingPosition}\n            />\n          </SearchButton>\n          <Snackbar show={errorLookupMsg}>\n            <Text size=\"1.5rem\" secondary>\n              {errorLookupMsg}\n            </Text>\n            <span onClick={() => setErrorLookupMsg(null)}>\n              <Icon size=\"2x\" icon={faTimes} />\n            </span>\n          </Snackbar>\n        </SearchContainer>\n      </form>\n      <div style={{ marginTop: '1rem', textAlign: 'center' }}>\n        <SearchLocation onClick={() => getPosition()}>\n          <span>Or use my location</span>\n        </SearchLocation>\n      </div>\n    </SearchWrapper>\n  );\n}\n\nexport default Search;\n","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useLookup() {\n  const [results, setResults] = useState([]);\n  const [isLookingUp, setIsLookingUp] = useState(false);\n  const [errorLookupMsg, setErrorLookupMsg] = useState('');\n\n  const lookup = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsLookingUp(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/autocomplete`, {\n        params\n      });\n      if (data.error) {\n        setErrorLookupMsg(data.error.info);\n      } else {\n        setErrorLookupMsg(null);\n        setResults(data.results);\n      }\n    } catch (error) {\n      setErrorLookupMsg(error.toString());\n    } finally {\n      setIsLookingUp(false);\n    }\n  }, []);\n  return {\n    results,\n    setResults,\n    isLookingUp,\n    lookup,\n    errorLookupMsg,\n    setErrorLookupMsg\n  };\n}\n","import { useState, useCallback } from 'react';\n\nexport function useGeoLocation(options = {}) {\n  const [position, setPosition] = useState();\n  const [error, setError] = useState();\n  const [isLoadingPosition, setIsLoadingPosition] = useState(false);\n\n  const onSuccess = (position) => {\n    const { latitude, longitude } = position.coords;\n    setPosition(`${latitude},${longitude}`);\n    setIsLoadingPosition(false);\n  };\n\n  const onError = (error) => {\n    setError(error);\n    setIsLoadingPosition(false);\n  };\n\n  const getPosition = useCallback(() => {\n    const { geolocation } = navigator;\n    setIsLoadingPosition(true);\n\n    if (!geolocation) {\n      setIsLoadingPosition(false);\n      setError('Geolocation is not supported.');\n      return;\n    }\n\n    geolocation.getCurrentPosition(onSuccess, onError, options);\n  }, [options]);\n\n  return {\n    isLoadingPosition,\n    position,\n    getPosition,\n    error\n  };\n}\n","import styled from 'styled-components';\n\nconst TileGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n  text-align: center;\n  align-items: center;\n`;\n\nexport default TileGroup;\n","import styled from 'styled-components';\n\nconst TileBody = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nexport default TileBody;\n","import styled from 'styled-components';\n\nimport TileGroup from './TileGroup';\nimport TileBody from './TileBody';\n\nconst Tile = styled.div`\n  display: inline-block;\n`;\n\nTile.Group = TileGroup;\nTile.Body = TileBody;\n\nexport default Tile;\n","import React from 'react';\nimport { string, object, bool } from 'prop-types';\nimport styled from 'styled-components';\n\nimport Icon from '../Icon';\nimport Text from '../Text';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 14.25rem;\n\n  & span {\n    color: lightgrey;\n  }\n`;\n\nfunction Empty({ text, size, icon, spin }) {\n  return (\n    <Container>\n      <Icon icon={icon} size={size} spin={spin} />\n      <Text size=\"2rem\" secondary>\n        {text}\n      </Text>\n    </Container>\n  );\n}\n\nEmpty.propTypes = {\n  text: string,\n  size: string,\n  icon: object,\n  spin: bool\n};\n\nexport default Empty;\n","import React from 'react';\nimport { array, bool, object, func } from 'prop-types';\nimport styled from 'styled-components';\nimport {\n  faStar as regular,\n  faCompass,\n  faSun\n} from '@fortawesome/free-regular-svg-icons';\nimport {\n  faStar as solid,\n  faWind,\n  faWater,\n  faCloud,\n  faTemperatureLow,\n  faSpinner\n} from '@fortawesome/free-solid-svg-icons';\nimport { faCloudscale } from '@fortawesome/free-brands-svg-icons';\n// components\nimport Icon from '../Icon';\nimport Text from '../Text';\nimport Tile from '../Tile';\nimport Empty from '../Empty';\n\nimport { respondTo } from '../../utils';\n\nconst PageHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 2.5rem;\n\n  h2 {\n    margin-bottom: 1rem;\n  }\n`;\n\nconst PageBody = styled.div`\n  ${respondTo.xxs`\n    display: block;\n  `}\n\n  ${respondTo.xl`\n    display: flex;\n  `}\n`;\n\nconst PageBodyLeft = styled.div`\n  display: flex;\n  flex-basis: 40%;\n  justify-content: space-evenly;\n\n  ${respondTo.xxs`\n    margin-bottom: 2rem;\n  `}\n\n  ${respondTo.xl`\n    margin-bottom: 0;\n  `}\n`;\n\nconst PageBodyRight = styled.div`\n  flex: 1;\n`;\n\nconst SpanImage = styled.span`\n  align-self: flex-end;\n\n  & > img {\n    border-radius: 10rem;\n    height: 12rem;\n    width: 12rem;\n  }\n`;\n\nfunction Weather({ weather, favorites, onToggleFavorites, loading }) {\n  const { current, location } = weather;\n\n  const getCityName = () => {\n    return `${location.name}, ${location.country}`;\n  };\n\n  const getCurrentDate = () => {\n    return new Date(location.localtime_epoch * 1000).toDateString();\n  };\n\n  const isFavorite = () => {\n    const idx = favorites.findIndex(\n      (favorite) => favorite.location.name === location.name\n    );\n    return idx !== -1;\n  };\n\n  if (loading) {\n    return (\n      <Empty\n        size=\"6x\"\n        text={loading ? 'Loading weather...' : 'Weather information'}\n        icon={loading ? faSpinner : faSun}\n        spin={loading}\n      />\n    );\n  }\n\n  if (Object.keys(weather).length === 0) return null;\n\n  return (\n    <>\n      <PageHeader>\n        <div>\n          <h2 style={{ display: 'inline-block' }}>\n            <Text size=\"2.4rem\" primary>\n              {getCityName()}\n            </Text>\n          </h2>\n          <p>\n            <Text size=\"2rem\" weight=\"300\" secondary>\n              {getCurrentDate()}\n            </Text>\n          </p>\n        </div>\n        <Icon\n          hover\n          color=\"orange\"\n          size=\"3x\"\n          icon={isFavorite() ? solid : regular}\n          onIconClick={onToggleFavorites}\n        />\n      </PageHeader>\n      <PageBody>\n        <PageBodyLeft>\n          <SpanImage>\n            <img alt=\"weather icon\" src={current.weather_icons[0]} />\n          </SpanImage>\n          <div>\n            <h3>\n              <Text size=\"10rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </h3>\n            <h4>\n              <Text size=\"2.5rem\" weight=\"400\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </h4>\n          </div>\n        </PageBodyLeft>\n        <PageBodyRight>\n          <Tile.Group style={{ height: '100%' }}>\n            <Tile>\n              <Text weight=\"300\" primary>\n                Wind Speed\n              </Text>\n              <Tile.Body>\n                <Text secondary>{`${current.wind_speed} km/h`}</Text>\n              </Tile.Body>\n              <Icon icon={faWind} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text weight=\"300\" primary>\n                Wind Direction\n              </Text>\n              <Tile.Body>\n                <Text secondary>{`${current.wind_dir}`}</Text>\n              </Tile.Body>\n              <Icon icon={faCompass} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text weight=\"300\" primary>\n                Pressure\n              </Text>\n              <Tile.Body>\n                <Text secondary>{`${current.pressure} mb`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloudscale} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text weight=\"300\" primary>\n                Humidity\n              </Text>\n              <Tile.Body>\n                <Text secondary>{`${current.humidity} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faWater} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text weight=\"300\" primary>\n                Cloud Cover\n              </Text>\n              <Tile.Body>\n                <Text secondary>{`${current.cloudcover} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloud} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text weight=\"300\" primary>\n                Feels like\n              </Text>\n              <Tile.Body>\n                <Text secondary>{`${current.feelslike} ${'\\u00b0'}C`}</Text>\n              </Tile.Body>\n              <Icon icon={faTemperatureLow} size=\"4x\" />\n            </Tile>\n          </Tile.Group>\n        </PageBodyRight>\n      </PageBody>\n    </>\n  );\n}\n\nWeather.propTypes = {\n  weather: object,\n  favorties: array,\n  loading: bool,\n  onToggleFavorites: func\n};\n\nexport default Weather;\n","import React, { useContext } from 'react';\nimport { string } from 'prop-types';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// components\nimport Weather from '../../components/Weather';\nimport { ACTION_TYPES } from '../../constants';\n\nfunction CityWeather({ source }) {\n  const [\n    { loadingWeather, searchResult, favorites, weather },\n    dispatch\n  ] = useContext(WeatherContext.WeatherStateContext);\n  return (\n    <Weather\n      loading={loadingWeather}\n      weather={source === 'search' ? searchResult : weather}\n      favorites={favorites}\n      onToggleFavorites={() =>\n        dispatch({\n          type: ACTION_TYPES.TOGGLE_FAVORITES,\n          weather: source === 'search' ? searchResult : weather\n        })\n      }\n    />\n  );\n}\n\nCityWeather.propTypes = {\n  source: string\n};\n\nexport default CityWeather;\n","import styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n`;\n\nexport default Grid;\n","import React from 'react';\nimport { string, element } from 'prop-types';\nimport styled from 'styled-components';\n\nimport Text from '../Text';\n\nconst FlexHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nfunction Header({ title, subtitle, children }) {\n  return (\n    <FlexHeader>\n      <div>\n        <h2>\n          <Text size=\"2rem\" primary>\n            {title}\n          </Text>\n        </h2>\n        <p style={{ minHeight: '1.8rem' }}>\n          <Text size=\"1.5rem\" weight=\"200\" secondary>\n            {subtitle}\n          </Text>\n        </p>\n      </div>\n      {children}\n    </FlexHeader>\n  );\n}\n\nHeader.propTypes = {\n  title: string,\n  subTitle: string,\n  children: element\n};\n\nexport default Header;\n","import styled from 'styled-components';\n\nconst Body = styled.div``;\n\nexport default Body;\n","import styled from 'styled-components';\n\nconst Overlay = styled.div`\n  background: #fff;\n  padding: 0 1rem;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  top: 100%;\n  transition: all 0.2s ease-out;\n`;\n\nexport default Overlay;\n","import styled from 'styled-components';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Overlay from './Overlay';\n\nconst Card = styled.div`\n  border: 1px solid grey;\n  padding: 1rem;\n  position: relative;\n  transition: all 0.2s ease-out;\n\n  ${(props) =>\n    props.hover &&\n    `&:hover {\n      box-shadow: 0 1rem 2rem rgba(0,0,0,.2);\n      transform: translateY(-10px);\n      .overlay {\n        opacity: 0.8;\n        top: 33%;\n      }\n    }`}\n`;\n\nCard.Header = Header;\nCard.Body = Body;\nCard.Overlay = Overlay;\n\nexport default Card;\n","import styled from 'styled-components';\n\nconst ButtonIcon = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: center;\n  height: 100%;\n\n  & > button:first-child {\n    margin-bottom: 8px;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: 2px solid grey;\n  border-radius: 2rem;\n  padding: 6px 10px;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    cursor: pointer;\n    border: 2px solid lightseagreen;\n    color: lightseagreen;\n  }\n\n  &:active {\n    transform: translateY(5px);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nButton.Group = ButtonGroup;\nButton.Icon = ButtonIcon;\n\nexport default Button;\n","import styled from 'styled-components';\n\nconst Header = styled.header`\n  margin-bottom: 2.5rem;\n`;\n\nexport default Header;\n","import React, { useContext } from 'react';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { faFolderOpen } from '@fortawesome/free-regular-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\nimport Text from '../../components/Text';\n// etc\nimport { ACTION_TYPES } from '../../constants';\nimport Empty from '../../components/Empty';\nimport Header from '../../components/Header';\n\nfunction Favorites() {\n  const [{ favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const history = useHistory();\n\n  const renderFavorites = () => {\n    return favorites.map((favorite, idx) => {\n      const { current, location } = favorite;\n      return (\n        <Card key={idx} hover>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <Icon\n              hover\n              color=\"orange\"\n              size=\"2x\"\n              icon={faStar}\n              onIconClick={() =>\n                dispatch({\n                  type: ACTION_TYPES.TOGGLE_FAVORITES,\n                  weather: favorite\n                })\n              }\n            />\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p style={{ minHeight: '3.7rem' }}>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button\n                onClick={() =>\n                  history.push('/details', {\n                    weather: favorite,\n                    query: location.name\n                  })\n                }\n              >\n                Learn more\n              </Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  return (\n    <>\n      <Header>\n        <h2>\n          <Text\n            size=\"2.5rem\"\n            weight=\"600\"\n            secondary\n          >{`Favorites (${favorites.length})`}</Text>\n        </h2>\n      </Header>\n      {favorites.length === 0 ? (\n        <Empty size=\"6x\" text=\"No favorites\" icon={faFolderOpen} />\n      ) : (\n        <Grid style={{ minHeight: '14.25rem' }}>{renderFavorites()}</Grid>\n      )}\n    </>\n  );\n}\n\nexport default Favorites;\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  faStar as regular,\n  faFolderOpen\n} from '@fortawesome/free-regular-svg-icons';\nimport { faStar as solid, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useCities from '../../hooks/useCities';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\nimport Empty from '../../components/Empty';\nimport Header from '../../components/Header';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nfunction TopCities() {\n  const [\n    { cities, loadingCities, favorites, allCitiesRemoved },\n    dispatch\n  ] = useContext(WeatherContext.WeatherStateContext);\n  const history = useHistory();\n  const { fetchCities } = useCities();\n\n  useEffect(() => {\n    if (cities.length === 0 && !allCitiesRemoved) {\n      fetchCities();\n    }\n  }, [fetchCities, cities, allCitiesRemoved]);\n\n  const getFavoritesName = () => {\n    let lookup = {};\n    for (let city of favorites) {\n      lookup[city.location.name] = city.location.name;\n    }\n    return lookup;\n  };\n\n  const handleRemoveCity = (cityIdx) => {\n    dispatch({ type: ACTION_TYPES.REMOVE_CITY, cityIdx });\n  };\n\n  const renderCities = () => {\n    const fav = getFavoritesName();\n    const addComma = /\\B(?=(\\d{3})+(?!\\d))/g;\n\n    return cities.map((city, idx) => {\n      const { current, location, population, rank } = city;\n\n      return (\n        <Card key={idx} hover>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <Icon\n              hover\n              color=\"orange\"\n              size=\"2x\"\n              icon={fav[location.name] ? solid : regular}\n              onIconClick={() =>\n                dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: city })\n              }\n            />\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p style={{ minHeight: '3.7rem' }}>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <div>\n            <div>\n              <Text weight=\"600\" size=\"1.4rem\" secondary>\n                Rank: {rank}\n              </Text>\n            </div>\n            <div>\n              <Text weight=\"600\" size=\"1.4rem\" secondary>\n                Population: {population.toString().replace(addComma, ',')}\n              </Text>\n            </div>\n          </div>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button\n                onClick={() =>\n                  history.push('/details', {\n                    weather: city,\n                    query: location.name\n                  })\n                }\n              >\n                <Text size=\"1.3rem\" weight=\"300\" secondary>\n                  Learn More\n                </Text>\n              </Button>\n              <Button onClick={() => handleRemoveCity(idx)}>\n                <Text size=\"1.3rem\" weight=\"300\" secondary>\n                  Remove\n                </Text>\n              </Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  return (\n    <>\n      <Header>\n        <h2>\n          <Text size=\"2.5rem\" weight=\"600\" secondary>\n            Top 15 cities by population (A-Z)\n          </Text>\n        </h2>\n      </Header>\n      {loadingCities || cities.length === 0 ? (\n        <Empty\n          size=\"6x\"\n          text={loadingCities ? 'Loading cities...' : 'No cities found'}\n          icon={loadingCities ? faSpinner : faFolderOpen}\n          spin={loadingCities}\n        />\n      ) : (\n        <Grid>{renderCities()}</Grid>\n      )}\n    </>\n  );\n}\n\nexport default TopCities;\n","import { useState, useCallback, useContext } from 'react';\nimport axios from 'axios';\n\nimport WeatherContext from '../context/WeatherContext';\n\nimport { WEATHER_BASE_URL, ACTION_TYPES } from '../constants';\n\nexport default function useCities() {\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n  const [errorCitiesMsg, setErrorCitiesMsg] = useState();\n\n  const fetchCities = useCallback(async () => {\n    const { data: topCities } = await axios.get('cities.json');\n    // mapping to get population and rank\n    let cityPopulation = {};\n    for (let city of topCities) {\n      cityPopulation[city.Name] = {\n        population: city.Population,\n        rank: city.rank\n      };\n    }\n\n    // build a string for bulk queries\n    const query = topCities\n      .reduce((prev, curr) => [...prev, curr.Name], [])\n      .join(';');\n\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      dispatch({ type: ACTION_TYPES.LOADING_CITIES, loading: true });\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, {\n        params\n      });\n      const sortedCities = data.sort((a, b) =>\n        a.location.name.localeCompare(b.location.name)\n      );\n      const withPopulation = sortedCities.map((city, idx) => {\n        return {\n          ...city,\n          population: cityPopulation[city.location.name].population,\n          rank: cityPopulation[city.location.name].rank\n        };\n      });\n      // store for offline reference\n      window.localStorage.setItem(\n        'storedCities',\n        JSON.stringify(withPopulation)\n      );\n\n      dispatch({ type: ACTION_TYPES.LOADING_CITIES, loading: false });\n      dispatch({ type: ACTION_TYPES.ADD_CITIES, cities: withPopulation });\n    } catch (error) {\n      const store = window.localStorage.getItem('storedCities');\n\n      dispatch({ type: ACTION_TYPES.LOADING_CITIES, loading: false });\n      dispatch({ type: ACTION_TYPES.ADD_CITIES, cities: JSON.parse(store) });\n\n      setErrorCitiesMsg(error);\n    }\n  }, [dispatch]);\n\n  return {\n    fetchCities,\n    errorCitiesMsg\n  };\n}\n","import React from 'react';\n// components\nimport Container from '../../components/Container';\nimport Search from '../../containers/Search';\nimport CityWeather from '../../containers/CityWeather';\nimport Favorites from '../../containers/Favorites';\nimport TopCities from '../../containers/TopCities';\nimport Text from '../../components/Text';\n\nfunction HomePage() {\n  return (\n    <Container>\n      <Container.Panel>\n        <header>\n          <h1 style={{ textAlign: 'center', marginBottom: '1.5rem' }}>\n            <Text size=\"3.5rem\" primary>\n              Weather App\n            </Text>\n          </h1>\n          <Search />\n        </header>\n      </Container.Panel>\n      <main>\n        <Container.Panel>\n          <CityWeather source=\"search\" />\n        </Container.Panel>\n        <Container.Panel>\n          <Favorites />\n        </Container.Panel>\n        <Container.Panel>\n          <TopCities />\n        </Container.Panel>\n      </main>\n    </Container>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { string } from 'prop-types';\nimport {\n  faSun,\n  faMoon,\n  faFolderOpen\n} from '@fortawesome/free-regular-svg-icons';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\n// context\nimport useForecast from '../../hooks/useForecast';\n// components\nimport Card from '../../components/Card';\nimport Grid from '../../components/Grid';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Empty from '../../components/Empty';\n// etc\nimport { WEEKDAYS } from '../../constants';\nimport Header from '../../components/Header';\n\nfunction Forecast({ cityData }) {\n  const { forecast, isLoadingForecoast } = useForecast(cityData);\n\n  const renderForecast = () => {\n    const dates = [];\n    for (let day in forecast) {\n      const name = new Date(forecast[day].date).getDay();\n      dates.push(\n        <Card key={day}>\n          <Card.Header title={WEEKDAYS[name]} />\n          <Card.Body\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              marginBottom: '1rem'\n            }}\n          >\n            <div style={{ flex: 1 }}>\n              <Text size=\"5rem\" secondary>\n                {forecast[day].avgtemp}&deg;\n              </Text>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <div>\n                <Text size=\"1.5rem\" primary>\n                  max:&nbsp;\n                </Text>\n                <Text size=\"1.8rem\" secondary>\n                  {forecast[day].maxtemp}&deg;\n                </Text>\n              </div>\n              <div>\n                <Text size=\"1.5rem\" primary>\n                  min:&nbsp;\n                </Text>\n                <Text size=\"1.8rem\" secondary>\n                  {forecast[day].mintemp}&deg;\n                </Text>\n              </div>\n            </div>\n          </Card.Body>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Icon icon={faSun} size=\"2x\" />\n            <Text size=\"1.3rem\" secondary>\n              {forecast[day].astro.sunrise}\n            </Text>\n            <Icon icon={faMoon} size=\"2x\" />\n            <Text size=\"1.3rem\" secondary>\n              {forecast[day].astro.moonrise}\n            </Text>\n          </div>\n        </Card>\n      );\n    }\n    return dates;\n  };\n\n  return (\n    <>\n      <Header>\n        <h2>\n          <Text size=\"2.5rem\" weight=\"600\" secondary>\n            7-day Forecast\n          </Text>\n        </h2>\n      </Header>\n      {Object.keys(forecast).length === 0 ? (\n        <Empty\n          size=\"6x\"\n          text={isLoadingForecoast ? 'Loading forecast...' : 'No forecast'}\n          icon={isLoadingForecoast ? faSpinner : faFolderOpen}\n          spin={isLoadingForecoast}\n        />\n      ) : (\n        <Grid style={{ minHeight: '14.25rem' }}>{renderForecast()}</Grid>\n      )}\n    </>\n  );\n}\n\nForecast.propTypes = {\n  cityData: string\n};\n\nexport default Forecast;\n","import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useForecast(query) {\n  const [forecast, setForecast] = useState({});\n  const [isLoadingForecoast, setIsLoadingForecast] = useState(false);\n  const [errorForecastMsg, setErrorForecastMsg] = useState('');\n\n  const fetchData = useCallback(async () => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      forecast_days: 7,\n      query\n    };\n\n    try {\n      setIsLoadingForecast(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/forecast`, {\n        params\n      });\n      // store for offline reference\n      window.localStorage.setItem(\n        'storedForecast',\n        JSON.stringify(data.forecast)\n      );\n      setIsLoadingForecast(false);\n      setForecast(data.forecast);\n    } catch (error) {\n      const store = window.localStorage.getItem('storedForecast');\n\n      setIsLoadingForecast(false);\n      setForecast(JSON.parse(store));\n      setErrorForecastMsg(error);\n    }\n  }, [query]);\n\n  useEffect(() => {\n    fetchData(query);\n  }, [fetchData, query]);\n\n  return {\n    fetchData,\n    forecast,\n    isLoadingForecoast,\n    errorForecastMsg\n  };\n}\n","import React, { useState } from 'react';\nimport { string, func } from 'prop-types';\n\nfunction TextArea({ value, onBlur }) {\n  const [text, setText] = useState(value || '');\n  return (\n    <textarea\n      style={{ resize: 'none', width: '100%' }}\n      rows=\"5\"\n      value={text}\n      onChange={(e) => setText(e.target.value)}\n      onBlur={() => onBlur(text)}\n    />\n  );\n}\n\nTextArea.propTypes = {\n  value: string,\n  onBlur: func\n};\n\nexport default TextArea;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport uniqueId from 'lodash/uniqueId';\nimport { faFolderOpen } from '@fortawesome/free-regular-svg-icons';\nimport {\n  faPlus,\n  faTrashAlt,\n  faSpinner\n} from '@fortawesome/free-solid-svg-icons';\n\nimport WeatherContext from '../../context/WeatherContext';\n\nimport Card from '../../components/Card';\nimport Empty from '../../components/Empty';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Header from '../../components/Header';\nimport Grid from '../../components/Grid';\nimport TextArea from '../../components/TextArea';\n\nimport { ACTION_TYPES } from '../../constants';\n\nconst NotesHeader = styled(Header)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nfunction Notes() {\n  const [{ weather, notes, loadingWeather }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const checkNotesContent = () => {\n    const { location } = weather;\n    const filteredNotes = notes.filter((note) => note.name === location.name);\n\n    if (filteredNotes.length === 0) {\n      return (\n        <Empty size=\"6x\" text=\"Add some notes here'\" icon={faFolderOpen} />\n      );\n    }\n    return <Grid>{renderNotes(filteredNotes)}</Grid>;\n  };\n\n  const renderNotes = (filteredNotes) => {\n    return filteredNotes.map((item, idx) => {\n      return (\n        <Card key={`${item.name}-${idx}`}>\n          <Card.Header title={item.dateCreated}>\n            <Icon\n              hover\n              size=\"2x\"\n              icon={faTrashAlt}\n              onIconClick={() =>\n                dispatch({\n                  type: ACTION_TYPES.REMOVE_NOTE,\n                  payload: {\n                    id: item.id\n                  }\n                })\n              }\n            />\n          </Card.Header>\n          <Card.Body style={{ marginBottom: '1rem', marginTop: '1rem' }}>\n            <TextArea\n              value={item.note}\n              onBlur={(value) => {\n                // only update when value has changed\n                if (value !== '' && value !== item.note) {\n                  dispatch({\n                    type: ACTION_TYPES.EDIT_NOTE,\n                    payload: {\n                      id: item.id,\n                      note: value,\n                      editedAt: new Date().toLocaleTimeString()\n                    }\n                  });\n                }\n              }}\n            />\n          </Card.Body>\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div>\n              <Text size=\"1.5rem\" weight=\"600\" secondary>\n                Created at:{' '}\n              </Text>\n              <Text size=\"1.5rem\" secondary>\n                {item.createdAt}\n              </Text>\n            </div>\n            {item.editedAt && (\n              <div>\n                <Text size=\"1.5rem\" weight=\"600\" secondary>\n                  Edited at:{' '}\n                </Text>\n                <Text size=\"1.5rem\" secondary>\n                  {item.editedAt}\n                </Text>\n              </div>\n            )}\n          </div>\n        </Card>\n      );\n    });\n  };\n\n  return (\n    <>\n      <NotesHeader>\n        <h2>\n          <Text size=\"2.5rem\" weight=\"600\" secondary>\n            Notes\n          </Text>\n        </h2>\n        <Icon\n          onIconClick={() => {\n            dispatch({\n              type: ACTION_TYPES.ADD_NOTE,\n              payload: {\n                name: weather.location.name,\n                id: uniqueId(`${weather.location.name}_`),\n                dateCreated: new Date().toLocaleDateString(),\n                createdAt: new Date().toLocaleTimeString()\n              }\n            });\n          }}\n          size=\"3x\"\n          icon={faPlus}\n          hover\n        />\n      </NotesHeader>\n      {loadingWeather ? (\n        <Empty\n          size=\"6x\"\n          text={loadingWeather ? 'Loading notes...' : 'Add some notes here'}\n          icon={loadingWeather ? faSpinner : faFolderOpen}\n          spin={loadingWeather}\n        />\n      ) : (\n        checkNotesContent()\n      )}\n    </>\n  );\n}\n\nexport default Notes;\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n// hooks\nimport useWeather from '../../hooks/useWeather';\n// components\nimport Container from '../../components/Container';\nimport Forecast from '../../containers/Forecast';\nimport Notes from '../../containers/Notes';\nimport Button from '../../components/Button';\nimport Icon from '../../components/Icon';\nimport Text from '../../components/Text';\n// etc\nimport { ACTION_TYPES } from '../../constants';\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons';\nimport CityWeather from '../../containers/CityWeather';\n\nfunction CityPage(props) {\n  const { query } = props.history.location.state;\n\n  const history = useHistory();\n  const { fetchWeather } = useWeather();\n\n  useEffect(() => {\n    if (query) {\n      fetchWeather(query, ACTION_TYPES.SET_WEATHER_CURRENT);\n    }\n  }, [fetchWeather, query]);\n\n  return (\n    <Container>\n      <Container.Panel>\n        <Button onClick={() => history.push('/')}>\n          <Button.Icon>\n            <Icon icon={faChevronLeft} />\n            <Text style={{ marginLeft: '1rem' }} size=\"1.5rem\" secondary>\n              Back to home\n            </Text>\n          </Button.Icon>\n        </Button>\n      </Container.Panel>\n      <Container.Panel>\n        <CityWeather source=\"query\" />\n      </Container.Panel>\n      <Container.Panel>\n        <Forecast cityData={query} />\n      </Container.Panel>\n      <Container.Panel>\n        <Notes />\n      </Container.Panel>\n    </Container>\n  );\n}\n\nexport default CityPage;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Text from '../Text';\n\nconst Page404 = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nfunction PageNotFound() {\n  return (\n    <Page404>\n      <Text size=\"4rem\" primary>\n        Oopps!! 404, Page not found\n      </Text>\n    </Page404>\n  );\n}\n\nexport default PageNotFound;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// context\nimport WeatherContext from './context/WeatherContext';\n// components\nimport HomePage from './routes/HomePage';\nimport CityPage from './routes/CityPage';\nimport PageNotFound from './components/PageNotFound';\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL + '/'}>\n      <WeatherContext.WeatherStateProvider>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/details\" component={CityPage} />\n          <Route path=\"*\" component={PageNotFound} />\n        </Switch>\n      </WeatherContext.WeatherStateProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}