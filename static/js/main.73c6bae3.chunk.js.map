{"version":3,"sources":["constants.js","context/WeatherContext.js","components/Media/MediaHeader.js","components/Media/MediaHeaderIcon.js","components/Media/MediaContent.js","components/Media/index.js","components/Weather/WeatherIcon.js","components/Weather/WeatherTemp.js","components/Weather/WeatherTile.js","components/Weather/index.js","containers/CityInfo/CityInfo.js","components/Search/index.js","containers/SearchBox/SearchBox.js","hooks/useWeather.js","containers/Home/Home.js","hooks/useGeoLocation.js","App.js","index.js"],"names":["ACTION_TYPES","initialState","weather","favorites","reducer","state","action","type","name","location","findIndex","city","WeatherStateContext","createContext","WeatherStateProvider","children","Provider","value","useReducer","FlexContainer","styled","div","H2","h2","H4","h4","MediaHeader","primaryText","secondaryText","extra","style","flexBasis","Span","span","MediaHeaderIcon","onIconClick","icon","onClick","size","defaultProps","MediaContent","Media","IconContainer","props","WeatherIcon","alt","src","TempH3","h3","DescH4","WeatherTemp","alignSelf","temperature","description","TileDiv","WeatherTile","Weather","CityInfo","useContext","WeatherContext","dispatch","current","Object","keys","length","console","log","country","Date","localtime_epoch","toDateString","regular","justifyContent","weather_icons","weather_descriptions","wind_speed","wind_dir","pressure","humidity","cloudcover","feelslike","whyDidYouRender","Input","input","Button","button","Search","display","htmlFor","id","SearchInput","SearchButton","SearchBox","placeholder","useState","setWeather","isFetchingCurrent","setIsFetchingCurrent","errorMessage","setErrorMessage","useCallback","query","a","params","access_key","process","axios","get","data","error","info","useWeather","fetchCurrent","useEffect","onSubmit","e","searchStr","target","preventDefault","faSpinner","faSearch","spin","Home","options","position","setPosition","setError","onSuccess","coords","latitude","longitude","onError","getPosition","geolocation","navigator","getCurrentPosition","useGeoLocation","padding","margin","width","App","basename","window","pathname","exact","path","component","React","onlyLogs","titleColor","diffNameColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73c6bae3.chunk.js","sourcesContent":["export const WEATHER_BASE_URL = 'https://api.weatherstack.com/';\nexport const ACTION_TYPES = {\n  FETCH_WEATHER: 'FETCH_WEATHER',\n  ADD: 'ADD',\n  REMOVE: 'REMOVE'\n};\n","import React, { createContext, useReducer } from 'react';\nimport { ACTION_TYPES } from '../constants';\n\nconst initialState = {\n  weather: {},\n  favorites: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_WEATHER: {\n      return {\n        ...state,\n        weather: action.weather\n      };\n    }\n    case ACTION_TYPES.ADD: {\n      const { name } = action.weather.location;\n      const cityIndex = state.favorites.findIndex((city) => city.location.name === name);\n      // favorites must be unique\n      if (cityIndex === -1) {\n        return {\n          ...state,\n          favorites: [...state.favorites, action.weather]\n        };\n      }\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n\nconst WeatherStateContext = createContext();\n\nconst WeatherStateProvider = ({ children }) => {\n  return (\n    <WeatherStateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </WeatherStateContext.Provider>\n  );\n};\n\nexport default { WeatherStateContext, WeatherStateProvider };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { string, element } from 'prop-types';\n\nconst FlexContainer = styled.div`\n  display: flex;\n  justify-content: space-between\n`;\n\nconst H2 = styled.h2`\n  font-size: 4rem;\n  margin: 1.5rem 0;\n`;\n\nconst H4 = styled.h4`\n  font-size: 2rem;\n  margin: 1.5rem 0;\n`;\n\nfunction MediaHeader({ primaryText, secondaryText, extra }) {\n  return (\n    <div style={{ flexBasis: '100%' }}>\n      <FlexContainer>\n        <H2>{primaryText}</H2>\n        {extra}\n      </FlexContainer>\n      <H4>{secondaryText}</H4>\n    </div>\n  );\n}\n\nMediaHeader.propTypes = {\n  primaryText: string,\n  secondaryText: string,\n  extra: element,\n};\n\nexport default MediaHeader;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { func, object } from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Span = styled.span`\n  align-self: center;\n`;\n\nfunction MediaHeaderIcon({ onIconClick, icon }) {\n  return (\n    <Span onClick={onIconClick}>\n      <FontAwesomeIcon icon={icon} size=\"2x\" />\n    </Span>\n  );\n}\n\nMediaHeaderIcon.propTypes = {\n  onIconClick: func,\n  icon: object\n};\n\nMediaHeaderIcon.defaultProps = {\n  onIconClick: () => {}\n};\n\nexport default MediaHeaderIcon;\n","import styled from 'styled-components';\n\nconst MediaContent = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media screen and (min-width: 769px) {\n    flex-basis: 50%;\n  }\n\n  @media screen and (max-width: 768px) {\n    flex-basis: 100%;\n  }\n`;\n\nexport default MediaContent;\n","import styled from 'styled-components';\n\nimport MediaHeader from './MediaHeader';\nimport MediaHeaderIcon from './MediaHeaderIcon';\nimport MediaContent from './MediaContent';\n\nconst Media = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nMedia.MediaHeader = MediaHeader;\nMedia.MediaHeaderIcon = MediaHeaderIcon;\nMedia.MediaContent = MediaContent;\n\nexport default Media;\n","import React from 'react';\nimport { string } from 'prop-types';\nimport styled from 'styled-components';\n\nconst IconContainer = styled.span`\n  align-self: center;\n\n  & > img {\n    border-radius: 10rem;\n    ${(props) => props.size && `height: ${props.size}; width: ${props.size};`};\n  }\n`;\n\nfunction WeatherIcon(props) {\n  return (\n    <IconContainer size={props.size}>\n      <img alt=\"weather icon\" src={props.icon} />\n    </IconContainer>\n  );\n}\n\nWeatherIcon.propTypes = {\n  icon: string,\n  size: string\n};\n\nexport default WeatherIcon;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { number, string } from 'prop-types';\n\nconst TempH3 = styled.h3`\n  font-family: Raleway, sans-serif;\n  font-size: 10rem;\n  margin: 0;\n`;\n\nconst DescH4 = styled.h4`\n  font-family: Raleway, sans-serif;\n  font-size: 4rem;\n  margin: 0;\n`;\n\nfunction WeatherTemp(props) {\n  return (\n    <div style={{ alignSelf: 'center' }}>\n      <TempH3>{props.temperature} &#8451;</TempH3>\n      <DescH4>{props.description}</DescH4>\n    </div>\n  );\n}\n\nWeatherTemp.propTypes = {\n  description: string,\n  temperature: number\n};\n\nexport default WeatherTemp;\n","import React from 'react';\nimport { string } from 'prop-types';\nimport styled from 'styled-components';\n\nconst TileDiv = styled.div`\n  display: inline-block;\n  flex-basis: 33.33%;\n  text-align: center;\n\n  & > div {\n    font-size: 4rem;\n  }\n\n  & > h5 {\n    font-family: Raleway, sans-serif;\n    font-size: 2.2rem;\n    font-weight: 400;\n    margin: 1rem 0;\n    text-align: center;\n  }\n`;\n\nfunction WeatherTile(props) {\n  return (\n    <TileDiv>\n      <div>{props.value}</div>\n      <h5>{props.description}</h5>\n    </TileDiv>\n  );\n}\n\nWeatherTile.propTypes = {\n  value: string,\n  description: string\n};\n\nexport default WeatherTile;\n","import WeatherIcon from './WeatherIcon';\nimport WeatherTemp from './WeatherTemp';\nimport WeatherTile from './WeatherTile';\n\nexport default { WeatherIcon, WeatherTile, WeatherTemp };\n","import React, { useContext } from 'react';\nimport { faStar as regular } from '@fortawesome/free-regular-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// components\nimport Media from '../../components/Media';\nimport { default as Weather } from '../../components/Weather';\nimport WeatherTile from '../../components/Weather/WeatherTile';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nconst { MediaHeader, MediaHeaderIcon, MediaContent } = Media;\nconst { WeatherIcon, WeatherTemp } = Weather;\n\nfunction CityInfo() {\n  const [{ weather, favorites }, dispatch] = useContext(WeatherContext.WeatherStateContext);\n  const { current, location } = weather;\n\n  const getCityName = () => {\n    return `${location.name}, ${location.country}`;\n  };\n\n  const getCurrentDate = () => {\n    return new Date(location.localtime_epoch * 1000).toDateString();\n  };\n\n  if (Object.keys(weather).length === 0) return null;\n\n  console.log(favorites);\n\n  return (\n    <Media>\n      <MediaHeader\n        primaryText={getCityName()}\n        secondaryText={getCurrentDate()}\n        extra={<MediaHeaderIcon icon={regular} onIconClick={() => dispatch({ type: ACTION_TYPES.ADD, weather })} />}\n      />\n      <MediaContent style={{ justifyContent: 'space-evenly' }}>\n        <WeatherIcon icon={current.weather_icons[0]} size=\"12rem\" />\n        <WeatherTemp temperature={current.temperature} description={current.weather_descriptions[0]} />\n      </MediaContent>\n      <MediaContent>\n        <WeatherTile value={`${current.wind_speed} km/h`} description=\"Wind Speed\" />\n        <WeatherTile value={`${current.wind_dir}`} description=\"Wind Direction\" />\n        <WeatherTile value={`${current.pressure} mb`} description=\"Pressure\" />\n        <WeatherTile value={`${current.humidity} %`} description=\"Humidity\" />\n        <WeatherTile value={`${current.cloudcover} %`} description=\"Cloud Cover\" />\n        <WeatherTile value={`${current.feelslike} ${'\\u00b0'}C`} description=\"Feels like\" />\n      </MediaContent>\n    </Media>\n  );\n}\n\nCityInfo.whyDidYouRender = true;\n\nexport default CityInfo;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n  border: 2px solid var(--color-lightgrey);\n  border-radius: 5rem;\n  font-family: 'Fredoka One', cursive;\n  font-size: 2.6rem;\n  letter-spacing: 2px;\n  padding: 1rem 4rem 1rem 1rem;\n  margin-right: -3.5rem;\n  outline: none;\n  width: 100%;\n  transition: all 0.2s ease-out;\n\n  &::placeholder {\n    color: var(--color-lightgrey);\n  }\n\n  &:focus {\n    border: 2px solid var(--color-lightslategrey);\n\n    &::placeholder {\n      color: var(--color-lightslategrey);\n    }\n  }\n`;\n\nconst Button = styled.button`\n  background-color: transparent;\n  border: none;\n  padding: 0;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Search = (props) => {\n  return (\n    <div style={{ display: \"flex\" }}>\n      <label htmlFor={props.id}></label>\n      {props.children}\n    </div>\n  );\n};\n\nSearch.SearchInput = Input;\nSearch.SearchButton = Button;\n\nexport default Search;\n","import React, { useContext, useEffect } from 'react';\nimport { string } from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useWeather from '../../hooks/useWeather';\n// components\nimport Search from '../../components/Search';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nconst { SearchInput, SearchButton } = Search;\n\nfunction SearchBox(props) {\n  const { id, placeholder } = props;\n  const [weather, isFetchingCurrent, fetchCurrent] = useWeather();\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n\n  useEffect(() => {\n    dispatch({ type: ACTION_TYPES.FETCH_WEATHER, weather });\n  }, [weather, dispatch]);\n\n  const handleSubmit = (e) => {\n    const searchStr = e.target[0].value;\n    e.preventDefault();\n    fetchCurrent(searchStr);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Search id={id}>\n        <SearchInput id={id} placeholder={placeholder} />\n        <SearchButton>\n          <FontAwesomeIcon icon={isFetchingCurrent ? faSpinner : faSearch} size=\"2x\" spin={isFetchingCurrent} />\n        </SearchButton>\n      </Search>\n    </form>\n  );\n}\n\nSearchBox.propTypes = {\n  id: string,\n  placeholder: string\n};\n\nSearchBox.defaultProps = {\n  id: 'search-input',\n  placeholder: 'Enter a text here',\n};\n\nSearchBox.whyDidYouRender = true;\n\nexport default SearchBox;","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useWeather() {\n  const [weather, setWeather] = useState({});\n  const [isFetchingCurrent, setIsFetchingCurrent] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const fetchCurrent = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsFetchingCurrent(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, { params });\n      if (data.error) {\n        setErrorMessage(data.error.info);\n      } else {\n        setWeather(data);\n      }\n    } catch (error) {\n      setErrorMessage(error);\n    } finally {\n      setIsFetchingCurrent(false);\n    }\n  }, []);\n\n  return [\n    weather,\n    isFetchingCurrent,\n    fetchCurrent,\n    errorMessage\n  ];\n}","import React from 'react';\nimport CityInfo from '../CityInfo';\nimport SearchBox from '../SearchBox';\nimport { useGeoLocation } from '../../hooks/useGeoLocation';\n\nfunction Home() {\n  const {position, getPosition} = useGeoLocation();\n  return (\n    <div style={{ padding: '100px' }}>\n      <div style={{ margin: '0 auto', width: '600px' }}>\n        <SearchBox placeholder=\"Enter a city name\" />\n        <p>\n          <button onClick={() => getPosition()}>Click</button>\n        </p>\n      </div>\n      <div>\n        <CityInfo />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import { useState, useCallback } from 'react';\n\nexport function useGeoLocation(options = {}) {\n  const [position, setPosition] = useState();\n  const [error, setError] = useState();\n\n  const onSuccess = (position) => {\n    const { latitude, longitude } = position.coords;\n    setPosition(`${latitude},${longitude}`);\n  };\n\n  const onError = (error) => {\n    setError(error);\n  };\n\n  const getPosition = useCallback(() => {\n    const { geolocation } = navigator;\n\n    if (!geolocation) {\n      setError('Geolocation is not supported.');\n      return;\n    }\n\n    geolocation.getCurrentPosition(onSuccess, onError, options);\n  }, [options]);\n\n  return {\n    position,\n    getPosition,\n    error\n  };\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// context\nimport WeatherContext from './context/WeatherContext';\n// components\nimport Home from './containers/Home';\nimport CityInfo from './containers/CityInfo';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={window.location.pathname || ''}>\n      <WeatherContext.WeatherStateProvider>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/details\" component={CityInfo} />\n        </Switch>\n      </WeatherContext.WeatherStateProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport whyDidYouRender from \"@welldone-software/why-did-you-render\";\n\nimport './index.css';\nimport App from './App';\n\nwhyDidYouRender(React, {\n  onlyLogs: true,\n  titleColor: \"green\",\n  diffNameColor: \"darkturquoise\"\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}