{"version":3,"sources":["constants.js","context/WeatherContext.js","containers/SearchBox/SearchBox.js","hooks/useWeather.js","hooks/useLookup.js","hooks/useGeoLocation.js","components/Text/index.js","components/Icon/index.js","components/Tile/TileGroup.js","components/Tile/TileBody.js","components/Tile/index.js","containers/CityInfo/CityInfo.js","components/Grid/index.js","components/Card/Header.js","components/Card/Body.js","components/Card/Overlay.js","components/Card/index.js","components/Button/index.js","containers/Favorites/Favorites.js","containers/TopCities/TopCities.js","hooks/useCities.js","containers/Home/Home.js","App.js","index.js"],"names":["ACTION_TYPES","initialState","weather","favorites","reducer","state","action","type","name","location","cityIndex","findIndex","city","sort","a","b","localeCompare","slice","WeatherStateContext","createContext","WeatherStateProvider","children","Provider","value","useReducer","SearchWrapper","styled","div","SearchContainer","SearchButton","button","SearchLocation","SearchBox","history","useHistory","useContext","WeatherContext","dispatch","useState","query","setQuery","setWeather","isFetchingCurrent","setIsFetchingCurrent","errorMessage","setErrorMessage","fetchCurrent","useCallback","params","access_key","process","axios","get","data","error","info","useWeather","results","setResults","isLookingUp","setIsLookingUp","errorLookupMsg","setErrorLookupMsg","lookup","useLookup","options","position","setPosition","setError","onSuccess","coords","latitude","longitude","onError","getPosition","geolocation","navigator","getCurrentPosition","useGeoLocation","debounceSearch","useMemo","debounce","useEffect","push","onSubmit","e","preventDefault","searchStr","target","focusInputOnSuggestionClick","inputProps","placeholder","onChange","newValue","suggestions","onSuggestionsFetchRequested","reason","cancel","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","getSuggestionValue","suggestion","region","country","renderSuggestion","size","icon","faSpinner","faSearch","spin","style","marginTop","textAlign","onClick","Text","span","props","primary","secondary","weight","Icon","FontAwesomeIcon","color","TileGroup","TileBody","Tile","Group","Body","PageHeader","header","PageBody","PageBodyLeft","PageBodyRight","SpanImage","CityInfo","current","Object","keys","length","Date","localtime_epoch","toDateString","favorite","solid","regular","alt","src","weather_icons","temperature","weather_descriptions","height","wind_speed","faWind","wind_dir","faCompass","pressure","faCloudscale","humidity","faWater","cloudcover","faCloud","feelslike","faTemperatureLow","Grid","FlexHeader","Header","title","subtitle","Overlay","Card","ButtonGroup","Button","Favorites","marginBottom","map","idx","key","faStar","className","TopCities","cities","setCities","isFetchingCities","setIsFetchingCities","errorCitiesMsg","setErrorCitiesMsg","fetchData","reduce","prev","curr","Name","join","sortedData","useCities","fav","getFavoritesName","cityIdx","renderCities","HomeWrapper","SegmentWrapper","Home","App","basename","window","pathname","exact","path","component","whyDidYouRender","React","onlyLogs","titleColor","diffNameColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8124f554.chunk.js","sourcesContent":["export const WEATHER_BASE_URL = 'https://api.weatherstack.com';\nexport const ACTION_TYPES = {\n  FETCH_WEATHER: 'FETCH_WEATHER',\n  TOGGLE_FAVORITES: 'TOGGLE_FAVORITES',\n};\n","import React, { createContext, useReducer } from 'react';\nimport { ACTION_TYPES } from '../constants';\n\nconst initialState = {\n  weather: {},\n  favorites: [],\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_WEATHER: {\n      return {\n        ...state,\n        weather: action.weather,\n      };\n    }\n    case ACTION_TYPES.TOGGLE_FAVORITES: {\n      const { name } = action.weather.location;\n      const cityIndex = state.favorites.findIndex(\n        (city) => city.location.name === name\n      );\n      // favorites must be unique\n      // then remove if selected again\n      if (cityIndex === -1) {\n        const favorites = [...state.favorites, action.weather].sort((a, b) =>\n          a.location.name.localeCompare(b.location.name)\n        );\n        return {\n          ...state,\n          favorites,\n        };\n      } else {\n        return {\n          ...state,\n          favorites: [\n            ...state.favorites.slice(0, cityIndex),\n            ...state.favorites.slice(cityIndex + 1),\n          ],\n        };\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst WeatherStateContext = createContext();\n\nconst WeatherStateProvider = ({ children }) => {\n  return (\n    <WeatherStateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </WeatherStateContext.Provider>\n  );\n};\n\nexport default { WeatherStateContext, WeatherStateProvider };\n","import React, { useContext, useEffect, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport Autosuggest from 'react-autosuggest';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\nimport useLookup from '../../hooks/useLookup';\nimport useWeather from '../../hooks/useWeather';\nimport { useGeoLocation } from '../../hooks/useGeoLocation';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nconst SearchWrapper = styled.div`\n  margin: 0 auto;\n  max-width: 60rem;\n`;\n\nconst SearchContainer = styled.div`\n  & {\n    display: flex;\n\n    & .react-autosuggest {\n      &__container {\n        flex: 1;\n        position: relative;\n      }\n\n      &__input {\n        border: 2px solid var(--color-lightgrey);\n        font-family: 'Fredoka One', cursive;\n        font-size: 2.5rem;\n        letter-spacing: 2px;\n        padding: 1rem 4rem 1rem 1rem;\n        outline: none;\n        transition: all 0.2s ease-in-out;\n        width: 100%;\n\n        &::placeholder {\n          color: var(--color-lightgrey);\n        }\n\n        &:focus {\n          border: 2px solid var(--color-lightslategrey);\n\n          &::placeholder {\n            color: var(--color-lightslategrey);\n          }\n        }\n\n        &--open {\n          border-bottom-left-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      &__suggestions {\n        &-container {\n          display: none;\n        }\n\n        &-container--open {\n          display: block;\n          position: absolute;\n          top: 6rem;\n          width: 100%;\n          border: 2px solid var(--color-lightslategrey);\n          background-color: #fff;\n          font-family: Raleway;\n          font-weight: 400;\n          font-size: 1.6rem;\n          z-index: 10;\n        }\n\n        &-list {\n          margin: 0;\n          padding: 0;\n          list-style-type: none;\n        }\n      }\n\n      &__suggestion {\n        cursor: pointer;\n        padding: 1rem 2rem;\n\n        &--highlighted {\n          background-color: var(--color-lightslategrey);\n        }\n      }\n    }\n  }\n`;\n\nconst SearchButton = styled.button`\n  background-color: transparent;\n  border: none;\n  margin-left: -3.5rem;\n  z-index: 10;\n  transition: all 0.2s ease-in-out;\n\n  &:active {\n    transform: translateY(5px);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SearchLocation = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n\n  > span {\n    font-family: Raleway;\n    font-size: 1.5rem;\n    font-weight: 600;\n    text-decoration: underline;\n  }\n`;\n\nfunction SearchBox() {\n  const history = useHistory();\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n\n  const [query, setQuery] = useState('');\n\n  const { weather, isFetchingCurrent, fetchCurrent } = useWeather();\n  const { results, isLookingUp, lookup } = useLookup();\n  const { position, getPosition } = useGeoLocation();\n\n  const debounceSearch = useMemo(() => debounce(lookup, 400), [lookup]);\n\n  useEffect(() => {\n    dispatch({ type: ACTION_TYPES.FETCH_WEATHER, weather });\n  }, [weather, dispatch]);\n\n  useEffect(() => {\n    if (position) {\n      // we navigate to details page once\n      // user allows location access\n      history.push('/details');\n      // fetchCurrent(position);\n    }\n  }, [position, history]);\n\n  const handleChange = (e, { newValue }) => {\n    setQuery(newValue);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchStr = e.target[0].value;\n    // call API if input is not blank\n    if (searchStr !== '') {\n      fetchCurrent(searchStr);\n    }\n  };\n  // populates the input value upon mouse/keyboard click\n  const getSuggestionValue = (suggestion) => {\n    return `${suggestion.name}, ${suggestion.region}, ${suggestion.country}`;\n  };\n  // renders the list of suggestions via dropdown container\n  const renderSuggestion = (suggestion) => {\n    return (\n      <span>{`${suggestion.name}, ${suggestion.region}, ${suggestion.country}`}</span>\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ reason, value }) => {\n    if (reason === 'input-changed') {\n      debounceSearch(value);\n    } else {\n      debounceSearch.cancel();\n    }\n  };\n  // triggers api call when clicking a city inside select options\n  // by default, this only works on keydown\n  const onSuggestionSelected = (e, { suggestionValue }) => {\n    if (e.type === 'click') {\n      fetchCurrent(suggestionValue);\n    }\n  };\n\n  return (\n    <SearchWrapper>\n      <form onSubmit={handleSubmit}>\n        <SearchContainer>\n          <Autosuggest\n            focusInputOnSuggestionClick={false}\n            inputProps={{\n              placeholder: 'Enter a city name',\n              onChange: handleChange,\n              value: query,\n            }}\n            suggestions={results}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={() => {}}\n            onSuggestionSelected={onSuggestionSelected}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n          />\n          <SearchButton>\n            <FontAwesomeIcon\n              size=\"2x\"\n              icon={isLookingUp || isFetchingCurrent ? faSpinner : faSearch}\n              spin={isLookingUp || isFetchingCurrent}\n            />\n          </SearchButton>\n        </SearchContainer>\n      </form>\n      <div style={{ marginTop: '1rem', textAlign: 'center' }}>\n        <SearchLocation onClick={() => getPosition()}>\n          <span>Or use my location</span>\n        </SearchLocation>\n      </div>\n    </SearchWrapper>\n  );\n}\n\nexport default SearchBox;\n","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useWeather() {\n  const [weather, setWeather] = useState({});\n  const [isFetchingCurrent, setIsFetchingCurrent] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const fetchCurrent = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query,\n    };\n\n    try {\n      setIsFetchingCurrent(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, {\n        params,\n      });\n      if (data.error) {\n        setErrorMessage(data.error.info);\n      } else {\n        setWeather(data);\n      }\n    } catch (error) {\n      setErrorMessage(error);\n    } finally {\n      setIsFetchingCurrent(false);\n    }\n  }, []);\n\n  return {\n    weather,\n    isFetchingCurrent,\n    fetchCurrent,\n    errorMessage,\n  };\n}\n","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useLookup() {\n  const [results, setResults] = useState([]);\n  const [isLookingUp, setIsLookingUp] = useState(false);\n  const [errorLookupMsg, setErrorLookupMsg] = useState({});\n\n  const lookup = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query,\n    };\n\n    try {\n      setIsLookingUp(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/autocomplete`, {\n        params,\n      });\n      if (data.error) {\n        setErrorLookupMsg(data.error.info);\n      } else {\n        setResults(data.results);\n      }\n    } catch (error) {\n      setErrorLookupMsg(error);\n    } finally {\n      setIsLookingUp(false);\n    }\n  }, []);\n\n  return {\n    results,\n    setResults,\n    isLookingUp,\n    lookup,\n    errorLookupMsg,\n  };\n}\n","import { useState, useCallback } from 'react';\n\nexport function useGeoLocation(options = {}) {\n  const [position, setPosition] = useState();\n  const [error, setError] = useState();\n\n  const onSuccess = (position) => {\n    const { latitude, longitude } = position.coords;\n    setPosition(`${latitude},${longitude}`);\n  };\n\n  const onError = (error) => {\n    setError(error);\n  };\n\n  const getPosition = useCallback(() => {\n    const { geolocation } = navigator;\n\n    if (!geolocation) {\n      setError('Geolocation is not supported.');\n      return;\n    }\n\n    geolocation.getCurrentPosition(onSuccess, onError, options);\n  }, [options]);\n\n  return {\n    position,\n    getPosition,\n    error,\n  };\n}\n","import styled from 'styled-components';\n\nconst Text = styled.span`\n  ${(props) => props.primary && `font-family: 'Fredoka One'`};\n  ${(props) => props.secondary && `font-family: 'Raleway'`};\n  ${(props) => props.weight && `font-weight: ${props.weight}`};\n  ${(props) => props.size && `font-size: ${props.size}`};\n`;\n\nexport default Text;\n","import styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Icon = styled(FontAwesomeIcon)`\n  &&& {\n    cursor: 'pointer';\n    ${(props) => props.color && `color: ${props.color}`};\n  }\n`;\n\nexport default Icon;\n","import styled from 'styled-components';\n\nconst TileGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n  text-align: center;\n  align-items: center;\n`;\n\nexport default TileGroup;\n","import styled from 'styled-components';\n\nconst TileBody = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nexport default TileBody;\n","import styled from 'styled-components';\n\nimport TileGroup from './TileGroup';\nimport TileBody from './TileBody';\n\nconst Tile = styled.div`\n  display: inline-block;\n`;\n\nTile.Group = TileGroup;\nTile.Body = TileBody;\n\nexport default Tile;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport {\n  faStar as regular,\n  faCompass,\n} from '@fortawesome/free-regular-svg-icons';\nimport {\n  faStar as solid,\n  faWind,\n  faWater,\n  faCloud,\n  faTemperatureLow,\n} from '@fortawesome/free-solid-svg-icons';\nimport { faCloudscale } from '@fortawesome/free-brands-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// components\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Tile from '../../components/Tile';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nconst PageHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 2.5rem;\n\n  h2 {\n    margin-bottom: 1rem;\n  }\n`;\n\nconst PageBody = styled.div`\n  display: flex;\n`;\n\nconst PageBodyLeft = styled.div`\n  display: flex;\n  flex-basis: 40%;\n  justify-content: space-evenly;\n`;\n\nconst PageBodyRight = styled.div`\n  flex: 1;\n`;\n\nconst SpanImage = styled.span`\n  align-self: flex-end;\n\n  & > img {\n    border-radius: 10rem;\n    height: 12rem;\n    width: 12rem;\n  }\n`;\n\nfunction CityInfo() {\n  const [{ weather, favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const { current, location } = weather;\n\n  const getCityName = () => {\n    return `${location.name}, ${location.country}`;\n  };\n\n  const getCurrentDate = () => {\n    return new Date(location.localtime_epoch * 1000).toDateString();\n  };\n\n  const isFavorite = () => {\n    const idx = favorites.findIndex(\n      (favorite) => favorite.location.name === location.name\n    );\n    return idx !== -1;\n  };\n\n  if (Object.keys(weather).length === 0) return null;\n\n  return (\n    <>\n      <PageHeader>\n        <div>\n          <h2>\n            <Text size=\"3rem\" primary>\n              {getCityName()}\n            </Text>\n          </h2>\n          <p>\n            <Text weight=\"300\" size=\"2.5rem\" secondary>\n              {getCurrentDate()}\n            </Text>\n          </p>\n        </div>\n        <span\n          onClick={() =>\n            dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather })\n          }\n        >\n          <Icon\n            color=\"orange\"\n            icon={isFavorite() ? solid : regular}\n            size=\"3x\"\n          />\n        </span>\n      </PageHeader>\n      <PageBody>\n        <PageBodyLeft>\n          <SpanImage>\n            <img alt=\"weather icon\" src={current.weather_icons[0]} />\n          </SpanImage>\n          <div>\n            <h3>\n              <Text size=\"10rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </h3>\n            <h4>\n              <Text size=\"2.5rem\" weight=\"400\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </h4>\n          </div>\n        </PageBodyLeft>\n        <PageBodyRight>\n          <Tile.Group style={{ height: '100%' }}>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Wind Speed\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>\n                  {`${current.wind_speed} km/h`}\n                </Text>\n              </Tile.Body>\n              <Icon icon={faWind} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Wind Direction\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>\n                  {`${current.wind_dir}`}\n                </Text>\n              </Tile.Body>\n              <Icon icon={faCompass} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Pressure\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.pressure} mb`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloudscale} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Humidity\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.humidity} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faWater} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Cloud Cover\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.cloudcover} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloud} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Feels like\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${\n                  current.feelslike\n                } ${'\\u00b0'}C`}</Text>\n              </Tile.Body>\n              <Icon icon={faTemperatureLow} size=\"4x\" />\n            </Tile>\n          </Tile.Group>\n        </PageBodyRight>\n      </PageBody>\n    </>\n  );\n}\n\nexport default CityInfo;\n","import styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Text from '../Text';\n\nconst FlexHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nfunction Header({ title, subtitle, children }) {\n  return (\n    <FlexHeader>\n      <div>\n        <h2>\n          <Text size=\"2rem\" primary>\n            {title}\n          </Text>\n        </h2>\n        <p>\n          <Text size=\"1.5rem\" weight=\"200\" secondary>\n            {subtitle}\n          </Text>\n        </p>\n      </div>\n      {children}\n    </FlexHeader>\n  );\n}\n\nexport default Header;\n","import styled from 'styled-components';\n\nconst Body = styled.div``;\n\nexport default Body;\n","import styled from 'styled-components';\n\nconst Overlay = styled.div`\n  background: #fff;\n  padding: 0 1rem;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  top: 100%;\n  transition: all 0.2s ease-out;\n`;\n\nexport default Overlay;\n","import styled from 'styled-components';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Overlay from './Overlay';\n\nconst Card = styled.div`\n  border: 1px solid grey;\n  padding: 1rem;\n  position: relative;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    border: 1px solid deepskyblue;\n    transform: translateY(-10px);\n    .overlay {\n      opacity: 0.8;\n      top: 40%;\n    }\n  }\n`;\n\nCard.Header = Header;\nCard.Body = Body;\nCard.Overlay = Overlay;\n\nexport default Card;\n","import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: center;\n  height: 100%;\n\n  & > button:first-child {\n    margin-bottom: 5px;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: 1px solid slategray;\n  border-radius: 5rem;\n  font-size: 1.2rem;\n  padding: 5px 8px;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    border: 1px solid deepskyblue;\n    color: deepskyblue;\n  }\n\n  &:active {\n    transform: translateY(5px);\n  }\n`;\n\nButton.Group = ButtonGroup;\n\nexport default Button;\n","import React, { useContext } from 'react';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\nimport Text from '../../components/Text';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nfunction Favorites() {\n  const [{ favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const history = useHistory();\n\n  const renderFavorites = () => {\n    return favorites.map((favorite, idx) => {\n      const { current, location } = favorite;\n      return (\n        <Card key={idx}>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <span\n              onClick={() =>\n                dispatch({\n                  type: ACTION_TYPES.TOGGLE_FAVORITES,\n                  weather: favorite,\n                })\n              }\n            >\n              <Icon color=\"orange\" icon={faStar} size=\"2x\" />\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button onClick={() => history.push('/details')}>\n                Learn more\n              </Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  if (favorites.length === 0) return null;\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>{`Favorites (${favorites.length})`}</Text>\n        </h2>\n      </div>\n      <Grid>{renderFavorites()}</Grid>\n    </>\n  );\n}\n\nexport default Favorites;\n","import React, { useContext } from 'react';\nimport { faStar as regular } from '@fortawesome/free-regular-svg-icons';\nimport { faStar as solid } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useCities from '../../hooks/useCities';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nfunction TopCities() {\n  const [{ favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n\n  const { cities, setCities } = useCities();\n\n  const getFavoritesName = () => {\n    let lookup = {};\n    for (let city of favorites) {\n      lookup[city.location.name] = city.location.name;\n    }\n    return lookup;\n  };\n\n  const handleRemoveCity = (cityIdx) => {\n    setCities([...cities.slice(0, cityIdx), ...cities.slice(cityIdx + 1)]);\n  };\n\n  const renderCities = () => {\n    const fav = getFavoritesName();\n\n    return cities.map((city, idx) => {\n      const { current, location } = city;\n      return (\n        <Card key={idx}>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <span\n              onClick={() =>\n                dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: city })\n              }\n            >\n              <Icon\n                color=\"orange\"\n                icon={fav[location.name] ? solid : regular}\n                size=\"2x\"\n              />\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button>Learn more</Button>\n              <Button onClick={() => handleRemoveCity(idx)}>Remove</Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n      // return (\n      //   <WeatherCard\n      //     key={idx}\n      //     name={location.name}\n      //     region={location.region}\n      //     icon={current.weather_icons[0]}\n      //     temp={current.temperature}\n      //     isFavorite={fav[location.name]}\n      //     onCardClick={() => dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: city })}\n      //   />\n      // );\n    });\n  };\n\n  if (cities.length === 0) return null;\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>\n            Top 15 cities by population (A-Z)\n          </Text>\n        </h2>\n      </div>\n      <Grid>{renderCities()}</Grid>\n    </>\n  );\n}\n\nexport default TopCities;\n","import { useState } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useCities() {\n  const [cities, setCities] = useState([]);\n  const [isFetchingCities, setIsFetchingCities] = useState(false);\n  const [errorCitiesMsg, setErrorCitiesMsg] = useState();\n\n  const fetchData = async () => {\n    const { data: cities } = await axios.get('cities.json');\n    const query = cities\n      .reduce((prev, curr) => [...prev, curr.Name], [])\n      .join(';');\n\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query,\n    };\n\n    try {\n      setIsFetchingCities(true);\n      // const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, { params });\n      const data = [];\n      const sortedData = data.sort((a, b) =>\n        a.location.name.localeCompare(b.location.name)\n      );\n      setCities(sortedData);\n    } catch (error) {\n      setErrorCitiesMsg(error);\n    } finally {\n      setIsFetchingCities(false);\n    }\n  };\n\n  useState(() => {\n    fetchData();\n  }, []);\n\n  return {\n    cities,\n    setCities,\n    isFetchingCities,\n    errorCitiesMsg,\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\n// components\nimport SearchBox from '../SearchBox';\nimport CityInfo from '../CityInfo';\nimport Favorites from '../Favorites';\nimport TopCities from '../TopCities';\n\nconst HomeWrapper = styled.div`\n  padding: 10rem 15rem;\n`;\n\nconst SegmentWrapper = styled.div`\n  margin-bottom: 2.5rem;\n`;\n\nfunction Home() {\n  return (\n    <HomeWrapper>\n      <SegmentWrapper>\n        <header>\n          <SearchBox />\n        </header>\n      </SegmentWrapper>\n      <main>\n        <SegmentWrapper>\n          <CityInfo />\n        </SegmentWrapper>\n        <SegmentWrapper>\n          <Favorites />\n        </SegmentWrapper>\n        <SegmentWrapper>\n          <TopCities />\n        </SegmentWrapper>\n      </main>\n    </HomeWrapper>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// context\nimport WeatherContext from './context/WeatherContext';\n// components\nimport Home from './containers/Home';\nimport CityInfo from './containers/CityInfo';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={window.location.pathname || ''}>\n      <WeatherContext.WeatherStateProvider>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/details\" component={CityInfo} />\n        </Switch>\n      </WeatherContext.WeatherStateProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport whyDidYouRender from '@welldone-software/why-did-you-render';\n\nimport './index.css';\nimport App from './App';\n\nwhyDidYouRender(React, {\n  onlyLogs: true,\n  titleColor: 'green',\n  diffNameColor: 'darkturquoise',\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}