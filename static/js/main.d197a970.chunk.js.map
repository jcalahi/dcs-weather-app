{"version":3,"sources":["constants.js","context/WeatherContext.js","components/Wrapper/index.js","containers/SearchBox/SearchBox.js","hooks/useWeather.js","hooks/useLookup.js","hooks/useGeoLocation.js","components/Media/MediaHeader.js","components/Media/MediaHeaderIcon.js","components/Media/MediaContent.js","components/Media/index.js","components/Weather/index.js","components/Text/index.js","components/Icon/index.js","components/Tile/index.js","containers/CityInfo/CityInfo.js","components/Grid/index.js","components/Card/Header.js","components/Card/Body.js","components/Card/Overlay.js","components/Card/index.js","components/Button/index.js","containers/Favorites/Favorites.js","containers/TopCities/TopCities.js","hooks/useCities.js","containers/Home/Home.js","App.js","index.js"],"names":["ACTION_TYPES","initialState","weather","favorites","reducer","state","action","type","name","location","cityIndex","findIndex","city","sort","a","b","localeCompare","slice","WeatherStateContext","createContext","WeatherStateProvider","children","Provider","value","useReducer","Wrapper","styled","div","SearchWrapper","SearchContainer","SearchButton","button","SearchLocation","SearchBox","history","useHistory","useContext","WeatherContext","dispatch","useState","query","setQuery","setWeather","isFetchingCurrent","setIsFetchingCurrent","errorMessage","setErrorMessage","fetchCurrent","useCallback","params","access_key","process","axios","get","data","error","info","useWeather","results","setResults","isLookingUp","setIsLookingUp","errorLookupMsg","setErrorLookupMsg","lookup","useLookup","options","position","setPosition","setError","onSuccess","coords","latitude","longitude","onError","getPosition","geolocation","navigator","getCurrentPosition","useGeoLocation","debounceSearch","useMemo","debounce","useEffect","push","onSubmit","e","preventDefault","searchStr","target","focusInputOnSuggestionClick","inputProps","placeholder","onChange","newValue","suggestions","onSuggestionsFetchRequested","reason","cancel","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","getSuggestionValue","suggestion","region","country","renderSuggestion","size","icon","faSpinner","faSearch","spin","style","marginTop","textAlign","onClick","FlexContainer","H2","h2","H4","h4","MediaHeader","primaryText","secondaryText","extra","flexBasis","Span","span","MediaHeaderIcon","onIconClick","defaultProps","MediaContent","Media","Weather","Text","props","primary","secondary","weight","Icon","FontAwesomeIcon","color","TileContent","TileGroup","Tile","Group","Content","WeatherIcon","WeatherTemp","WeatherTile","CityInfo","current","Object","keys","length","display","justifyContent","marginBottom","Date","localtime_epoch","toDateString","favorite","solid","regular","alignSelf","height","width","alt","src","weather_icons","temperature","weather_descriptions","flex","alignItems","wind_speed","faWind","wind_dir","faCompass","pressure","faCloudscale","humidity","faWater","cloudcover","faCloud","feelslike","faTemperatureLow","Grid","FlexHeader","header","Header","title","subtitle","Body","Overlay","Card","ButtonGroup","Button","Favorites","map","idx","key","faStar","className","TopCities","cities","setCities","isFetchingCities","setIsFetchingCities","errorCitiesMsg","setErrorCitiesMsg","fetchData","reduce","prev","curr","Name","join","sortedData","useCities","fav","getFavoritesName","cityIdx","renderCities","HomeWrapper","Home","App","basename","window","pathname","exact","path","component","whyDidYouRender","React","onlyLogs","titleColor","diffNameColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d197a970.chunk.js","sourcesContent":["export const WEATHER_BASE_URL = 'https://api.weatherstack.com';\nexport const ACTION_TYPES = {\n  FETCH_WEATHER: 'FETCH_WEATHER',\n  TOGGLE_FAVORITES: 'TOGGLE_FAVORITES'\n};\n","import React, { createContext, useReducer } from 'react';\nimport { ACTION_TYPES } from '../constants';\n\nconst initialState = {\n  weather: {},\n  favorites: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.FETCH_WEATHER: {\n      return {\n        ...state,\n        weather: action.weather\n      };\n    }\n    case ACTION_TYPES.TOGGLE_FAVORITES: {\n      const { name } = action.weather.location;\n      const cityIndex = state.favorites.findIndex((city) => city.location.name === name);\n      // favorites must be unique\n      // then remove if selected again\n      if (cityIndex === -1) {\n        const favorites = [...state.favorites, action.weather].sort((a, b) => a.location.name.localeCompare(b.location.name));\n        return {\n          ...state,\n          favorites,\n        };\n      } else {\n        return {\n          ...state,\n          favorites: [\n            ...state.favorites.slice(0, cityIndex),\n            ...state.favorites.slice(cityIndex + 1)\n          ]\n        };\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst WeatherStateContext = createContext();\n\nconst WeatherStateProvider = ({ children }) => {\n  return (\n    <WeatherStateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </WeatherStateContext.Provider>\n  );\n};\n\nexport default { WeatherStateContext, WeatherStateProvider };\n","import styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  margin-bottom: 3rem;\n`;\n\nexport default Wrapper;\n","import React, { useContext, useEffect, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport Autosuggest from 'react-autosuggest';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\nimport useLookup from '../../hooks/useLookup';\nimport useWeather from '../../hooks/useWeather';\nimport { useGeoLocation } from '../../hooks/useGeoLocation';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nconst SearchWrapper = styled.div`\n  margin: 0 auto;\n  max-width: 60rem;\n`;\n\nconst SearchContainer = styled.div`\n  & {\n    display: flex;\n\n    & .react-autosuggest {\n\n      &__container {\n        flex: 1;\n        position: relative;\n      }\n\n      &__input {\n        border: 2px solid var(--color-lightgrey);\n        font-family: 'Fredoka One', cursive;\n        font-size: 2.5rem;\n        letter-spacing: 2px;\n        padding: 1rem 4rem 1rem 1rem;\n        outline: none;\n        transition: all 0.2s ease-in-out;\n        width: 100%;\n\n        &::placeholder {\n          color: var(--color-lightgrey);\n        }\n\n        &:focus {\n          border: 2px solid var(--color-lightslategrey);\n\n          &::placeholder {\n            color: var(--color-lightslategrey);\n          }\n        }\n\n        &--open {\n          border-bottom-left-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      &__suggestions {\n        &-container {\n          display: none;\n        }\n\n        &-container--open {\n          display: block;\n          position: absolute;\n          top: 6rem;\n          width: 100%;\n          border: 2px solid var(--color-lightslategrey);\n          background-color: #fff;\n          font-family: Raleway;\n          font-weight: 400;\n          font-size: 1.6rem;\n          z-index: 10;\n        }\n\n        &-list {\n          margin: 0;\n          padding: 0;\n          list-style-type: none;\n        }\n      }\n\n      &__suggestion {\n        cursor: pointer;\n        padding: 1rem 2rem;\n\n        &--highlighted {\n          background-color: var(--color-lightslategrey);\n        }\n      }\n    }\n  }\n`;\n\nconst SearchButton = styled.button`\n  background-color: transparent;\n  border: none;\n  margin-left: -3.5rem;\n  z-index: 10;\n  transition: all 0.2s ease-in-out;\n\n  &:active {\n    transform: translateY(5px);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SearchLocation = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n\n  > span {\n    font-family: Raleway;\n    font-size: 1.5rem;\n    font-weight: 600;\n    text-decoration: underline;\n  }\n`;\n\nfunction SearchBox() {\n  const history = useHistory();\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n\n  const [query, setQuery] = useState('');\n\n  const { weather, isFetchingCurrent, fetchCurrent } = useWeather();\n  const { results, isLookingUp, lookup } = useLookup();\n  const { position, getPosition } = useGeoLocation();\n\n  const debounceSearch = useMemo(() => debounce(lookup, 400), [lookup]);\n\n  useEffect(() => {\n    dispatch({ type: ACTION_TYPES.FETCH_WEATHER, weather });\n  }, [weather, dispatch]);\n\n  useEffect(() => {\n    if (position) {\n      // we navigate to details page once\n      // user allows location access\n      history.push('/details');\n      // fetchCurrent(position);\n    }\n  }, [position, history]);\n\n  const handleChange = (e, { newValue }) => {\n    setQuery(newValue);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchStr = e.target[0].value;\n    // call API if input is not blank\n    if (searchStr !== '') {\n      fetchCurrent(searchStr);\n    }\n  };\n  // populates the input value upon mouse/keyboard click\n  const getSuggestionValue = (suggestion) => {\n    return `${suggestion.name}, ${suggestion.region}, ${suggestion.country}`;\n  };\n  // renders the list of suggestions via dropdown container\n  const renderSuggestion = (suggestion) => {\n    return (\n      <span>{`${suggestion.name}, ${suggestion.region}, ${suggestion.country}`}</span>\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ reason, value }) => {\n    if (reason === 'input-changed') {\n      debounceSearch(value);\n    } else {\n      debounceSearch.cancel();\n    }\n  };\n  // triggers api call when clicking a city inside select options\n  // by default, this only works on keydown\n  const onSuggestionSelected = (e, { suggestionValue }) => {\n    if (e.type === 'click') {\n      fetchCurrent(suggestionValue);\n    }\n  };\n\n  return (\n    <SearchWrapper>\n      <form onSubmit={handleSubmit}>\n        <SearchContainer>\n          <Autosuggest\n            focusInputOnSuggestionClick={false}\n            inputProps={{\n              placeholder: 'Enter a city name',\n              onChange: handleChange,\n              value: query,\n            }}\n            suggestions={results}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={() => {}}\n            onSuggestionSelected={onSuggestionSelected}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n          />\n          <SearchButton>\n            <FontAwesomeIcon\n              size=\"2x\"\n              icon={isLookingUp || isFetchingCurrent ? faSpinner : faSearch}\n              spin={isLookingUp || isFetchingCurrent}\n            />\n          </SearchButton>\n        </SearchContainer>\n      </form>\n      <div style={{ marginTop: '1rem', textAlign: 'center' }}>\n        <SearchLocation onClick={() => getPosition()}>\n          <span>Or use my location</span>\n        </SearchLocation>\n      </div>\n    </SearchWrapper>\n  );\n}\n\nexport default SearchBox;\n","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useWeather() {\n  const [weather, setWeather] = useState({});\n  const [isFetchingCurrent, setIsFetchingCurrent] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const fetchCurrent = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsFetchingCurrent(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, { params });\n      if (data.error) {\n        setErrorMessage(data.error.info);\n      } else {\n        setWeather(data);\n      }\n    } catch (error) {\n      setErrorMessage(error);\n    } finally {\n      setIsFetchingCurrent(false);\n    }\n  }, []);\n\n  return {\n    weather,\n    isFetchingCurrent,\n    fetchCurrent,\n    errorMessage\n  };\n}","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useLookup() {\n  const [results, setResults] = useState([]);\n  const [isLookingUp, setIsLookingUp] = useState(false);\n  const [errorLookupMsg, setErrorLookupMsg] = useState({});\n\n  const lookup = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsLookingUp(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/autocomplete`, { params });\n      if (data.error) {\n        setErrorLookupMsg(data.error.info);\n      } else {\n        setResults(data.results);\n      }\n    } catch (error) {\n      setErrorLookupMsg(error);\n    } finally {\n      setIsLookingUp(false);\n    }\n  }, []);\n\n  return {\n    results,\n    setResults,\n    isLookingUp,\n    lookup,\n    errorLookupMsg\n  };\n}\n","import { useState, useCallback } from 'react';\n\nexport function useGeoLocation(options = {}) {\n  const [position, setPosition] = useState();\n  const [error, setError] = useState();\n\n  const onSuccess = (position) => {\n    const { latitude, longitude } = position.coords;\n    setPosition(`${latitude},${longitude}`);\n  };\n\n  const onError = (error) => {\n    setError(error);\n  };\n\n  const getPosition = useCallback(() => {\n    const { geolocation } = navigator;\n\n    if (!geolocation) {\n      setError('Geolocation is not supported.');\n      return;\n    }\n\n    geolocation.getCurrentPosition(onSuccess, onError, options);\n  }, [options]);\n\n  return {\n    position,\n    getPosition,\n    error\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { string, element } from 'prop-types';\n\nconst FlexContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst H2 = styled.h2`\n  font-size: 4rem;\n  margin: 1.5rem 0;\n`;\n\nconst H4 = styled.h4`\n  font-family: Raleway;\n  font-size: 2.5rem;\n  margin: 1.5rem 0;\n`;\n\nfunction MediaHeader({ primaryText, secondaryText, extra }) {\n  return (\n    <div style={{ flexBasis: '100%' }}>\n      <FlexContainer>\n        <H2>{primaryText}</H2>\n        {extra}\n      </FlexContainer>\n      <H4>{secondaryText}</H4>\n    </div>\n  );\n}\n\nMediaHeader.propTypes = {\n  primaryText: string,\n  secondaryText: string,\n  extra: element,\n};\n\nexport default MediaHeader;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { func, object } from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Span = styled.span`\n  align-self: center;\n`;\n\nfunction MediaHeaderIcon({ onIconClick, icon }) {\n  return (\n    <Span onClick={onIconClick}>\n      <FontAwesomeIcon icon={icon} size=\"2x\" />\n    </Span>\n  );\n}\n\nMediaHeaderIcon.propTypes = {\n  onIconClick: func,\n  icon: object\n};\n\nMediaHeaderIcon.defaultProps = {\n  onIconClick: () => {}\n};\n\nexport default MediaHeaderIcon;\n","import styled from 'styled-components';\n\nconst MediaContent = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media screen and (min-width: 769px) {\n    flex-basis: 50%;\n  }\n\n  @media screen and (max-width: 768px) {\n    flex-basis: 100%;\n  }\n`;\n\nexport default MediaContent;\n","import styled from 'styled-components';\n\nimport MediaHeader from './MediaHeader';\nimport MediaHeaderIcon from './MediaHeaderIcon';\nimport MediaContent from './MediaContent';\n\nconst Media = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nMedia.MediaHeader = MediaHeader;\nMedia.MediaHeaderIcon = MediaHeaderIcon;\nMedia.MediaContent = MediaContent;\n\nexport default Media;\n","import styled from 'styled-components';\n\n// import WeatherCard from './WeatherCard';\n// import WeatherIcon from './WeatherIcon';\n// import WeatherTemp from './WeatherTemp';\n// import WeatherTile from './WeatherTile';\n\nconst Weather = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media screen and (min-width: 769px) {\n    flex-basis: 50%;\n  }\n\n  @media screen and (max-width: 768px) {\n    flex-basis: 100%;\n  }\n`;\n\n// Weather.WeatherIcon = WeatherIcon;\n// Weather.WeatherTemp = WeatherTemp;\n// Weather.WeatherTile = WeatherTile;\n// Weather.WeatherCard = WeatherCard;\n\nexport default Weather;\n","import styled from 'styled-components';\n\nconst Text = styled.span`\n  ${props => props.primary && `font-family: 'Fredoka One'`};\n  ${props => props.secondary && `font-family: 'Raleway'`};\n  ${props => props.weight && `font-weight: ${props.weight}`};\n  ${props => props.size && `font-size: ${props.size}`};\n`;\n\nexport default Text;\n","import styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Icon = styled(FontAwesomeIcon)`\n  &&& {\n    cursor: 'pointer';\n    ${props => props.color && `color: ${props.color}`};\n  }\n`;\n\nexport default Icon;\n","import styled from 'styled-components';\n\nconst TileContent = styled.div``;\n\nconst TileGroup = styled.div`\n\n`;\n\nconst Tile = styled.div`\n  display: inline-block;\n`;\n\nTile.Group = TileGroup;\nTile.Content = TileContent;\n\nexport default Tile;","import React, { useContext } from 'react';\nimport { faStar as regular, faCompass, } from '@fortawesome/free-regular-svg-icons';\nimport { faStar as solid, faWind, faWater, faCloud, faTemperatureLow } from '@fortawesome/free-solid-svg-icons';\nimport { faCloudscale } from '@fortawesome/free-brands-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// components\nimport Media from '../../components/Media';\nimport Weather from '../../components/Weather';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Tile from '../../components/Tile';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nconst { MediaContent } = Media;\nconst { WeatherIcon, WeatherTemp, WeatherTile } = Weather;\n\nfunction CityInfo() {\n  const [{ weather, favorites }, dispatch] = useContext(WeatherContext.WeatherStateContext);\n  const { current, location } = weather;\n\n  const getCityName = () => {\n    return `${location.name}, ${location.country}`;\n  };\n\n  const getCurrentDate = () => {\n    return new Date(location.localtime_epoch * 1000).toDateString();\n  };\n\n  const isFavorite = () => {\n    const idx = favorites.findIndex((favorite) => favorite.location.name === location.name);\n    return idx !== -1;\n  };\n\n  if (Object.keys(weather).length === 0) return null;\n\n  return (\n    <>\n      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '2.5rem' }}>\n        <div>\n          <h2 style={{ marginBottom: '1rem' }}>\n            <Text size=\"3rem\" primary>{getCityName()}</Text>\n          </h2>\n          <p>\n            <Text weight=\"300\" size=\"2.5rem\" secondary>{getCurrentDate()}</Text>\n          </p>\n        </div>\n        <span onClick={() => dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather })}>\n          <Icon color=\"orange\" icon={isFavorite() ? solid : regular } size=\"3x\" />\n        </span>\n      </div>\n      <div style={{ display: 'flex' }}>\n        <div style={{ display: 'flex', flexBasis: '40%', justifyContent: 'space-evenly' }}>\n          <span style={{ alignSelf: 'flex-end' }}>\n            <img style={{ height: '12rem', width: '12rem' }} alt=\"weather icon\" src={current.weather_icons[0]} />\n          </span>\n          <div>\n            <h3>\n              <Text size=\"10rem\" secondary>{current.temperature}&deg;</Text>\n            </h3>\n            <h4>\n              <Text size=\"2.5rem\" weight=\"400\" secondary>{current.weather_descriptions[0]}</Text>\n            </h4>\n          </div>\n        </div>\n        <Tile.Group style={{ display: 'flex', flex: 1, justifyContent: 'space-between', textAlign: 'center', alignItems: 'center' }}>\n          <Tile>\n            <Text size=\"2rem\" weight=\"300\" primary>Wind Speed</Text>\n            <Tile.Content>\n              <Text size=\"2.5rem\" secondary>{`${current.wind_speed} km/h`}</Text>\n            </Tile.Content>\n            <Icon style={{ marginTop: '1.5rem' }} icon={faWind} size=\"4x\" />\n          </Tile>\n          <Tile>\n            <Text size=\"2rem\" weight=\"300\" primary>Wind Direction</Text>\n            <Tile.Content>\n              <Text size=\"2.5rem\" secondary>{`${current.wind_dir}`}</Text>\n            </Tile.Content>\n            <Icon style={{ marginTop: '1.5rem' }} icon={faCompass} size=\"4x\" />\n          </Tile>\n          <Tile>\n            <Text size=\"2rem\" weight=\"300\" primary>Pressure</Text>\n            <Tile.Content>\n              <Text size=\"2.5rem\" secondary>{`${current.pressure} mb`}</Text>\n            </Tile.Content>\n            <Icon style={{ marginTop: '1.5rem' }} icon={faCloudscale} size=\"4x\" />\n          </Tile>\n          <Tile>\n            <Text size=\"2rem\" weight=\"300\" primary>Humidity</Text>\n            <Tile.Content>\n              <Text size=\"2.5rem\" secondary>{`${current.humidity} %`}</Text>\n            </Tile.Content>\n            <Icon style={{ marginTop: '1.5rem' }} icon={faWater} size=\"4x\" />\n          </Tile>\n          <Tile>\n            <Text size=\"2rem\" weight=\"300\" primary>Cloud Cover</Text>\n            <Tile.Content>\n              <Text size=\"2.5rem\" secondary>{`${current.cloudcover} %`}</Text>\n            </Tile.Content>\n            <Icon style={{ marginTop: '1.5rem' }} icon={faCloud} size=\"4x\" />\n          </Tile>\n          <Tile>\n            <Text size=\"2rem\" weight=\"300\" primary>Feels like</Text>\n            <Tile.Content>\n              <Text size=\"2.5rem\" secondary>{`${current.feelslike} ${'\\u00b0'}C`}</Text>\n            </Tile.Content>\n            <Icon style={{ marginTop: '1.5rem' }} icon={faTemperatureLow} size=\"4x\" />\n          </Tile>\n        </Tile.Group>\n      </div>\n      {/* <Media>\n        <MediaContent style={{ justifyContent: 'space-evenly' }}>\n          <WeatherIcon icon={current.weather_icons[0]} size=\"12rem\" />\n          <WeatherTemp temperature={current.temperature} description={current.weather_descriptions[0]} />\n        </MediaContent>\n        <Weather>\n          <WeatherTile value={`${current.wind_speed} km/h`} description=\"Wind Speed\" />\n          <WeatherTile value={`${current.wind_dir}`} description=\"Wind Direction\" />\n          <WeatherTile value={`${current.pressure} mb`} description=\"Pressure\" />\n          <WeatherTile value={`${current.humidity} %`} description=\"Humidity\" />\n          <WeatherTile value={`${current.cloudcover} %`} description=\"Cloud Cover\" />\n          <WeatherTile value={`${current.feelslike} ${'\\u00b0'}C`} description=\"Feels like\" />\n        </Weather>\n      </Media> */}\n    </>\n  );\n}\n\nexport default CityInfo;\n\n// wind speed - wind\n// wind direction - compass\n// wind pressure - cloud scale\n// humidity - water\n// cloud-cover- cloud\n// feels-like - temperature low","import styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr))\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Text from '../Text';\n\nconst FlexHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nfunction Header({ title, subtitle, children }) {\n  return (\n    <FlexHeader>\n      <div>\n        <h2>\n          <Text size=\"2rem\" primary>{title}</Text>\n        </h2>\n        <p>\n          <Text size=\"1.5rem\" weight=\"200\" secondary>{subtitle}</Text>\n        </p>\n      </div>\n      {children}\n    </FlexHeader>\n  );\n}\n\nexport default Header;\n","import styled from 'styled-components';\n\nconst Body = styled.div``;\n\nexport default Body;\n","import styled from 'styled-components';\n\nconst Overlay = styled.div`\n  background: #fff;\n  padding: 0 1rem;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  top: 100%;\n  transition: all 0.2s ease-out;\n`;\n\nexport default Overlay;\n","import styled from 'styled-components';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Overlay from './Overlay';\n\nconst Card = styled.div`\n  border: 1px solid grey;\n  padding: 1rem;\n  position: relative;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    border: 1px solid deepskyblue;\n    transform: translateY(-10px);\n    .overlay {\n      opacity: 0.8;\n      top: 40%;\n    }\n  }\n`;\n\nCard.Header = Header;\nCard.Body = Body;\nCard.Overlay = Overlay;\n\nexport default Card;\n","import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: center;\n  height: 100%;\n\n  & > button:first-child {\n    margin-bottom: 5px;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: 1px solid slategray;\n  border-radius: 5rem;\n  font-size: 1.2rem;\n  padding: 5px 8px;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    border: 1px solid deepskyblue;\n    color: deepskyblue;\n  }\n\n  &:active {\n    transform: translateY(5px);\n  }\n`;\n\nButton.Group = ButtonGroup;\n\nexport default Button;\n","import React, { useContext } from 'react';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\nimport Text from '../../components/Text';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nfunction Favorites() {\n  const [{ favorites }, dispatch] = useContext(WeatherContext.WeatherStateContext);\n  const history = useHistory();\n\n  const renderFavorites = () => {\n    return favorites.map((favorite, idx) => {\n      const { current, location } = favorite;\n      return (\n        <Card key={idx}>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <span onClick={() => dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: favorite })}>\n              <Icon color=\"orange\" icon={faStar} size=\"2x\" />\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button onClick={() => history.push('/details')}>Learn more</Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  if (favorites.length === 0) return null;\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>{`Favorites (${favorites.length})`}</Text>\n        </h2>\n      </div>\n      <Grid>\n        {renderFavorites()}\n      </Grid>\n    </>\n  );\n}\n\nexport default Favorites;\n","import React, { useContext } from 'react';\nimport { faStar as regular } from '@fortawesome/free-regular-svg-icons';\nimport { faStar as solid } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useCities from '../../hooks/useCities';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nfunction TopCities() {\n  const [{ favorites }, dispatch] = useContext(WeatherContext.WeatherStateContext);\n\n  const { cities, setCities } = useCities();\n\n  const getFavoritesName = () => {\n    let lookup = {};\n    for (let city of favorites) {\n      lookup[city.location.name] = city.location.name;\n    }\n    return lookup;\n  };\n\n  const handleRemoveCity = (cityIdx) => {\n    setCities([...cities.slice(0, cityIdx), ...cities.slice(cityIdx + 1)]);\n  };\n\n  const renderCities = () => {\n    const fav = getFavoritesName();\n\n    return cities.map((city, idx) => {\n      const { current, location } = city;\n      return (\n        <Card key={idx}>\n          <Card.Header  title={location.name} subtitle={location.region}>\n            <span onClick={() => dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: city })}>\n              <Icon color=\"orange\" icon={fav[location.name] ? solid : regular } size=\"2x\" />\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button>\n                Learn more\n              </Button>\n              <Button onClick={() => handleRemoveCity(idx)}>\n                Remove\n              </Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n      // return (\n      //   <WeatherCard\n      //     key={idx}\n      //     name={location.name}\n      //     region={location.region}\n      //     icon={current.weather_icons[0]}\n      //     temp={current.temperature}\n      //     isFavorite={fav[location.name]}\n      //     onCardClick={() => dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: city })}\n      //   />\n      // );\n    });\n  };\n\n  if (cities.length === 0) return null;\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>Top 15 cities by population (A-Z)</Text>\n        </h2>\n      </div>\n      <Grid>\n        {renderCities()}\n      </Grid>\n    </>\n  );\n}\n\nexport default TopCities;\n","import { useState } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useCities() {\n  const [cities, setCities] = useState([]);\n  const [isFetchingCities, setIsFetchingCities] = useState(false);\n  const [errorCitiesMsg, setErrorCitiesMsg] = useState();\n\n  const fetchData = async () => {\n    const { data: cities } = await axios.get('cities.json');\n    const query = cities.reduce((prev, curr) => [...prev, curr.Name], []).join(';');\n\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsFetchingCities(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, { params });\n      // const data = [];\n      const sortedData = data.sort((a, b) => a.location.name.localeCompare(b.location.name));\n      setCities(sortedData);\n    } catch (error) {\n      setErrorCitiesMsg(error);\n    } finally {\n      setIsFetchingCities(false);\n    }\n  };\n\n  useState(() => {\n    fetchData();\n  }, []);\n\n  return {\n    cities,\n    setCities,\n    isFetchingCities,\n    errorCitiesMsg\n  };\n}","import React from 'react';\nimport styled from 'styled-components';\n// components\nimport Wrapper from '../../components/Wrapper';\nimport SearchBox from '../SearchBox';\nimport CityInfo from '../CityInfo';\nimport Favorites from '../Favorites';\nimport TopCities from '../TopCities';\n\nconst HomeWrapper = styled.div`\n  padding: 10rem 15rem;\n`;\n\nfunction Home() {\n  return (\n    <HomeWrapper>\n      <Wrapper>\n        <header>\n          <SearchBox />\n        </header>\n      </Wrapper>\n      <main>\n        <Wrapper>\n          <CityInfo />\n        </Wrapper>\n        <Wrapper>\n          <Favorites />\n        </Wrapper>\n        <Wrapper>\n          <TopCities />\n        </Wrapper>\n      </main>\n    </HomeWrapper>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// context\nimport WeatherContext from './context/WeatherContext';\n// components\nimport Home from './containers/Home';\nimport CityInfo from './containers/CityInfo';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={window.location.pathname || ''}>\n      <WeatherContext.WeatherStateProvider>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/details\" component={CityInfo} />\n        </Switch>\n      </WeatherContext.WeatherStateProvider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport whyDidYouRender from \"@welldone-software/why-did-you-render\";\n\nimport './index.css';\nimport App from './App';\n\nwhyDidYouRender(React, {\n  onlyLogs: true,\n  titleColor: \"green\",\n  diffNameColor: \"darkturquoise\"\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}