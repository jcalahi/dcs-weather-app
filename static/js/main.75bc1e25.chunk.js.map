{"version":3,"sources":["constants.js","context/WeatherContext.js","components/Container/Panel.js","components/Container/index.js","hooks/useWeather.js","containers/Search/Search.js","hooks/useLookup.js","hooks/useGeoLocation.js","components/Icon/index.js","components/Text/index.js","components/Tile/TileGroup.js","components/Tile/TileBody.js","components/Tile/index.js","components/Empty/index.js","components/Weather/index.js","containers/SearchResult/SearchResult.js","components/Grid/index.js","components/Card/Header.js","components/Card/Body.js","components/Card/Overlay.js","components/Card/index.js","components/Button/index.js","containers/Favorites/Favorites.js","containers/TopCities/TopCities.js","hooks/useCities.js","containers/Home/Home.js","components/Panel/Title.js","components/Panel/index.js","components/Forecast/index.js","hooks/useForecast.js","components/Notes/index.js","containers/City/City.js","App.js","index.js"],"names":["WEATHER_BASE_URL","WEEKDAYS","ACTION_TYPES","SEARCH_RESULT","SET_WEATHER_CURRENT","SET_WEATHER_FORECAST","ADD_CITIES","REMOVE_CITY","TOGGLE_FAVORITES","LOADING_CITIES","LOADING_WEATHER","initialState","searchResult","weather","cities","favorites","loadingCities","loadingWeather","reducer","state","action","type","slice","cityIdx","name","location","cityIndex","findIndex","city","sort","a","b","localeCompare","loading","WeatherStateContext","createContext","WeatherStateProvider","children","Provider","value","useReducer","Panel","styled","div","Container","useWeather","useContext","WeatherContext","dispatch","useState","errorMessage","setErrorMessage","fetchWeather","useCallback","query","actionType","params","access_key","process","axios","get","data","error","info","SearchWrapper","SearchContainer","SearchButton","button","SearchLocation","Search","setQuery","history","useHistory","isLoadingWeather","results","setResults","isLookingUp","setIsLookingUp","errorLookupMsg","setErrorLookupMsg","lookup","useLookup","options","position","setPosition","setError","onSuccess","coords","latitude","longitude","onError","getPosition","geolocation","navigator","getCurrentPosition","useGeoLocation","debounceSearch","useMemo","debounce","useEffect","push","onSubmit","e","preventDefault","searchStr","target","focusInputOnSuggestionClick","inputProps","placeholder","onChange","newValue","suggestions","onSuggestionsFetchRequested","reason","cancel","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","getSuggestionValue","suggestion","region","country","renderSuggestion","size","icon","faSpinner","faSearch","spin","style","marginTop","textAlign","onClick","StyledSpan","span","props","color","hover","Icon","onIconClick","Text","primary","secondary","weight","TileGroup","TileBody","Tile","Group","Body","Empty","text","PageHeader","header","PageBody","PageBodyLeft","PageBodyRight","SpanImage","Weather","onToggleFavorites","current","Object","keys","length","faSun","display","Date","localtime_epoch","toDateString","favorite","solid","regular","alt","src","weather_icons","temperature","weather_descriptions","height","wind_speed","faWind","wind_dir","faCompass","pressure","faCloudscale","humidity","faWater","cloudcover","faCloud","feelslike","faTemperatureLow","SearchResult","Grid","FlexHeader","Header","title","subtitle","Overlay","Card","ButtonGroup","Button","Favorites","marginBottom","faFolderOpen","minHeight","map","idx","key","faStar","className","TopCities","fetchCities","errorCitiesMsg","setErrorCitiesMsg","topCities","reduce","prev","curr","Name","join","sortedCities","useCities","fav","getFavoritesName","renderCities","Home","Title","h2","Forecast","forecast","setForecast","isLoadingForecoast","setIsLoadingForecast","errorForecastMsg","setErrorForecastMsg","fetchData","forecast_days","useForecast","cityData","dates","day","date","getDay","justifyContent","flex","avgtemp","flexDirection","alignItems","maxtemp","mintemp","astro","sunrise","faMoon","moonrise","renderForecast","Notes","City","faChevronLeft","marginLeft","App","basename","exact","path","component","whyDidYouRender","React","onlyLogs","titleColor","diffNameColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75bc1e25.chunk.js","sourcesContent":["export const WEATHER_BASE_URL = 'https://api.weatherstack.com';\nexport const WEEKDAYS = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n];\nexport const ACTION_TYPES = {\n  SEARCH_RESULT: 'SEARCH_RESULT',\n  SET_WEATHER_CURRENT: 'SET_WEATHER_CURRENT',\n  SET_WEATHER_FORECAST: 'SET_WEATHER_FORECAST',\n  ADD_CITIES: 'ADD_CITIES',\n  REMOVE_CITY: 'REMOVE_CITY',\n  TOGGLE_FAVORITES: 'TOGGLE_FAVORITES',\n  LOADING_CITIES: 'LOADING_CITIES',\n  LOADING_WEATHER: 'LOADING_WEATHER'\n};\n","import React, { createContext, useReducer } from 'react';\nimport { ACTION_TYPES } from '../constants';\n\nconst initialState = {\n  searchResult: {}, // weather data from searching\n  weather: {}, // weather data from clicking a card/city\n  cities: [],\n  favorites: [],\n  loadingCities: false,\n  loadingWeather: false\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.SEARCH_RESULT: {\n      return {\n        ...state,\n        searchResult: action.weather\n      };\n    }\n    case ACTION_TYPES.SET_WEATHER_CURRENT: {\n      return {\n        ...state,\n        weather: action.weather\n      };\n    }\n    case ACTION_TYPES.ADD_CITIES: {\n      return {\n        ...state,\n        cities: action.cities\n      };\n    }\n    case ACTION_TYPES.REMOVE_CITY: {\n      return {\n        ...state,\n        cities: [\n          ...state.cities.slice(0, action.cityIdx),\n          ...state.cities.slice(action.cityIdx + 1)\n        ]\n      };\n    }\n    case ACTION_TYPES.TOGGLE_FAVORITES: {\n      const { name } = action.weather.location;\n      const cityIndex = state.favorites.findIndex(\n        (city) => city.location.name === name\n      );\n      // favorites must be unique\n      // then remove if selected again\n      if (cityIndex === -1) {\n        const favorites = [...state.favorites, action.weather].sort((a, b) =>\n          a.location.name.localeCompare(b.location.name)\n        );\n        return {\n          ...state,\n          favorites\n        };\n      } else {\n        return {\n          ...state,\n          favorites: [\n            ...state.favorites.slice(0, cityIndex),\n            ...state.favorites.slice(cityIndex + 1)\n          ]\n        };\n      }\n    }\n    case ACTION_TYPES.LOADING_CITIES: {\n      return {\n        ...state,\n        loadingCities: action.loading\n      };\n    }\n    case ACTION_TYPES.LOADING_WEATHER: {\n      return {\n        ...state,\n        loadingWeather: action.loading\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst WeatherStateContext = createContext();\n\nconst WeatherStateProvider = ({ children }) => {\n  return (\n    <WeatherStateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </WeatherStateContext.Provider>\n  );\n};\n\nexport default { WeatherStateContext, WeatherStateProvider };\n","import styled from 'styled-components';\n\nconst Panel = styled.div`\n  margin-bottom: 2.5rem;\n`;\n\nexport default Panel;\n","import styled from 'styled-components';\nimport Panel from './Panel';\n\nconst Container = styled.div`\n  padding: 10rem 20rem;\n`;\n\nContainer.Panel = Panel;\n\nexport default Container;\n","import { useState, useCallback, useContext } from 'react';\nimport axios from 'axios';\n\nimport WeatherContext from '../context/WeatherContext';\n\nimport { WEATHER_BASE_URL, ACTION_TYPES } from '../constants';\n\nexport default function useWeather() {\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const fetchWeather = useCallback(\n    async (query, actionType) => {\n      const params = {\n        access_key: process.env.REACT_APP_WEATHER_API_KEY,\n        query\n      };\n\n      try {\n        dispatch({ type: ACTION_TYPES.LOADING_WEATHER, loading: true });\n        const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, {\n          params\n        });\n        if (data.error) {\n          setErrorMessage(data.error.info);\n        } else {\n          dispatch({ type: ACTION_TYPES[actionType], weather: data });\n        }\n      } catch (error) {\n        setErrorMessage(error);\n      } finally {\n        dispatch({ type: ACTION_TYPES.LOADING_WEATHER, loading: false });\n      }\n    },\n    [dispatch]\n  );\n  return {\n    fetchWeather,\n    errorMessage\n  };\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport Autosuggest from 'react-autosuggest';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// hooks\nimport { useHistory } from 'react-router-dom';\nimport useLookup from '../../hooks/useLookup';\nimport useWeather from '../../hooks/useWeather';\nimport { useGeoLocation } from '../../hooks/useGeoLocation';\n// useEffect\nimport { ACTION_TYPES } from '../../constants';\n\nconst SearchWrapper = styled.div`\n  margin: 0 auto;\n  max-width: 60rem;\n`;\n\nconst SearchContainer = styled.div`\n  & {\n    display: flex;\n\n    & .react-autosuggest {\n      &__container {\n        flex: 1;\n        position: relative;\n      }\n\n      &__input {\n        border: 2px solid var(--color-lightgrey);\n        font-family: 'Fredoka One', cursive;\n        font-size: 2.5rem;\n        letter-spacing: 2px;\n        padding: 1rem 4rem 1rem 1rem;\n        outline: none;\n        transition: all 0.2s ease-in-out;\n        width: 100%;\n\n        &::placeholder {\n          color: var(--color-lightgrey);\n        }\n\n        &:focus {\n          border: 2px solid var(--color-lightslategrey);\n\n          &::placeholder {\n            color: var(--color-lightslategrey);\n          }\n        }\n\n        &--open {\n          border-bottom-left-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      &__suggestions {\n        &-container {\n          display: none;\n        }\n\n        &-container--open {\n          display: block;\n          position: absolute;\n          top: 6rem;\n          width: 100%;\n          border: 2px solid var(--color-lightslategrey);\n          background-color: #fff;\n          font-family: Raleway;\n          font-weight: 400;\n          font-size: 1.6rem;\n          z-index: 10;\n        }\n\n        &-list {\n          margin: 0;\n          padding: 0;\n          list-style-type: none;\n        }\n      }\n\n      &__suggestion {\n        cursor: pointer;\n        padding: 1rem 2rem;\n\n        &--highlighted {\n          background-color: var(--color-lightslategrey);\n        }\n      }\n    }\n  }\n`;\n\nconst SearchButton = styled.button`\n  background-color: transparent;\n  border: none;\n  margin-left: -3.5rem;\n  z-index: 10;\n  transition: all 0.2s ease-in-out;\n\n  &:active {\n    transform: translateY(5px);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SearchLocation = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n\n  > span {\n    font-family: Raleway;\n    font-size: 1.5rem;\n    font-weight: 600;\n    text-decoration: underline;\n  }\n`;\n\nfunction Search() {\n  const [query, setQuery] = useState('');\n\n  const history = useHistory();\n  const { fetchWeather, isLoadingWeather } = useWeather();\n  const { results, isLookingUp, lookup } = useLookup();\n  const { position, getPosition } = useGeoLocation();\n\n  const debounceSearch = useMemo(() => debounce(lookup, 400), [lookup]);\n\n  useEffect(() => {\n    if (position) {\n      // we navigate to details page once\n      // user allows location access\n      history.push('/details', {\n        query: position\n      });\n    }\n  }, [position, history, query]);\n\n  const handleChange = (e, { newValue }) => {\n    setQuery(newValue);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchStr = e.target[0].value;\n    // call API if input is not blank\n    if (searchStr !== '') {\n      fetchWeather(searchStr, ACTION_TYPES.SEARCH_RESULT);\n    }\n  };\n  // populates the input value upon mouse/keyboard click\n  const getSuggestionValue = (suggestion) => {\n    return `${suggestion.name}, ${suggestion.region}, ${suggestion.country}`;\n  };\n  // renders the list of suggestions via dropdown container\n  const renderSuggestion = (suggestion) => {\n    return (\n      <span>{`${suggestion.name}, ${suggestion.region}, ${suggestion.country}`}</span>\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ reason, value }) => {\n    if (reason === 'input-changed') {\n      debounceSearch(value);\n    } else {\n      debounceSearch.cancel();\n    }\n  };\n  // triggers api call when clicking a city inside select options\n  // by default, this only works on keydown\n  const onSuggestionSelected = (e, { suggestionValue }) => {\n    if (e.type === 'click') {\n      fetchWeather(suggestionValue, ACTION_TYPES.SEARCH_RESULT);\n    }\n  };\n\n  return (\n    <SearchWrapper>\n      <form onSubmit={handleSubmit}>\n        <SearchContainer>\n          <Autosuggest\n            focusInputOnSuggestionClick={false}\n            inputProps={{\n              placeholder: 'Enter a city name',\n              onChange: handleChange,\n              value: query\n            }}\n            suggestions={results}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={() => {}}\n            onSuggestionSelected={onSuggestionSelected}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n          />\n          <SearchButton>\n            <FontAwesomeIcon\n              size=\"2x\"\n              icon={isLookingUp || isLoadingWeather ? faSpinner : faSearch}\n              spin={isLookingUp || isLoadingWeather}\n            />\n          </SearchButton>\n        </SearchContainer>\n      </form>\n      <div style={{ marginTop: '1rem', textAlign: 'center' }}>\n        <SearchLocation onClick={() => getPosition()}>\n          <span>Or use my location</span>\n        </SearchLocation>\n      </div>\n    </SearchWrapper>\n  );\n}\n\nexport default Search;\n","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useLookup() {\n  const [results, setResults] = useState([]);\n  const [isLookingUp, setIsLookingUp] = useState(false);\n  const [errorLookupMsg, setErrorLookupMsg] = useState({});\n\n  const lookup = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsLookingUp(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/autocomplete`, {\n        params\n      });\n      if (data.error) {\n        setErrorLookupMsg(data.error.info);\n      } else {\n        setResults(data.results);\n      }\n    } catch (error) {\n      setErrorLookupMsg(error);\n    } finally {\n      setIsLookingUp(false);\n    }\n  }, []);\n\n  return {\n    results,\n    setResults,\n    isLookingUp,\n    lookup,\n    errorLookupMsg\n  };\n}\n","import { useState, useCallback } from 'react';\n\nexport function useGeoLocation(options = {}) {\n  const [position, setPosition] = useState();\n  const [error, setError] = useState();\n\n  const onSuccess = (position) => {\n    const { latitude, longitude } = position.coords;\n    setPosition(`${latitude},${longitude}`);\n  };\n\n  const onError = (error) => {\n    setError(error);\n  };\n\n  const getPosition = useCallback(() => {\n    const { geolocation } = navigator;\n\n    if (!geolocation) {\n      setError('Geolocation is not supported.');\n      return;\n    }\n\n    geolocation.getCurrentPosition(onSuccess, onError, options);\n  }, [options]);\n\n  return {\n    position,\n    getPosition,\n    error\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst StyledSpan = styled.span`\n  display: inline-block;\n\n  ${(props) => props.color && `color: ${props.color}`};\n  ${(props) => props.hover && `cursor: pointer`};\n`;\n\nfunction Icon({ color, icon, size, onIconClick, hover, spin }) {\n  return (\n    <StyledSpan color={color} onClick={onIconClick} hover={hover}>\n      <FontAwesomeIcon icon={icon} size={size} spin={spin} />\n    </StyledSpan>\n  );\n}\n\nexport default Icon;\n","import styled from 'styled-components';\n\nconst Text = styled.span`\n  ${(props) => props.primary && `font-family: 'Fredoka One'`};\n  ${(props) => props.secondary && `font-family: 'Raleway'`};\n  ${(props) => props.weight && `font-weight: ${props.weight}`};\n  ${(props) => props.size && `font-size: ${props.size}`};\n`;\n\nexport default Text;\n","import styled from 'styled-components';\n\nconst TileGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n  text-align: center;\n  align-items: center;\n`;\n\nexport default TileGroup;\n","import styled from 'styled-components';\n\nconst TileBody = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nexport default TileBody;\n","import styled from 'styled-components';\n\nimport TileGroup from './TileGroup';\nimport TileBody from './TileBody';\n\nconst Tile = styled.div`\n  display: inline-block;\n`;\n\nTile.Group = TileGroup;\nTile.Body = TileBody;\n\nexport default Tile;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Icon from '../Icon';\nimport Text from '../Text';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 14.25rem;\n\n  & span {\n    color: lightgrey;\n  }\n`;\n\nfunction Empty({ text, size, icon, spin }) {\n  return (\n    <Container>\n      <Icon icon={icon} size={size} spin={spin} />\n      <Text size=\"2rem\" secondary>\n        {text}\n      </Text>\n    </Container>\n  );\n}\n\nexport default Empty;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  faStar as regular,\n  faCompass,\n  faSun\n} from '@fortawesome/free-regular-svg-icons';\nimport {\n  faStar as solid,\n  faWind,\n  faWater,\n  faCloud,\n  faTemperatureLow,\n  faSpinner\n} from '@fortawesome/free-solid-svg-icons';\nimport { faCloudscale } from '@fortawesome/free-brands-svg-icons';\n// components\nimport Icon from '../Icon';\nimport Text from '../Text';\nimport Tile from '../Tile';\nimport Empty from '../Empty';\n\nconst PageHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 2.5rem;\n\n  h2 {\n    margin-bottom: 1rem;\n  }\n`;\n\nconst PageBody = styled.div`\n  display: flex;\n`;\n\nconst PageBodyLeft = styled.div`\n  display: flex;\n  flex-basis: 40%;\n  justify-content: space-evenly;\n`;\n\nconst PageBodyRight = styled.div`\n  flex: 1;\n`;\n\nconst SpanImage = styled.span`\n  align-self: flex-end;\n\n  & > img {\n    border-radius: 10rem;\n    height: 12rem;\n    width: 12rem;\n  }\n`;\n\nfunction Weather({ weather, favorites, onToggleFavorites, loading }) {\n  const { current, location } = weather;\n\n  const getCityName = () => {\n    return `${location.name}, ${location.country}`;\n  };\n\n  const getCurrentDate = () => {\n    return new Date(location.localtime_epoch * 1000).toDateString();\n  };\n\n  const isFavorite = () => {\n    const idx = favorites.findIndex(\n      (favorite) => favorite.location.name === location.name\n    );\n    return idx !== -1;\n  };\n\n  if (Object.keys(weather).length === 0 || loading)\n    return (\n      <Empty\n        size=\"6x\"\n        text={loading ? 'Loading weather...' : 'Weather information'}\n        icon={loading ? faSpinner : faSun}\n        spin={loading}\n      />\n    );\n\n  return (\n    <>\n      <PageHeader>\n        <div>\n          <h2 style={{ display: 'inline-block' }}>\n            <Text size=\"3rem\" primary>\n              {getCityName()}\n            </Text>\n          </h2>\n          <p>\n            <Text weight=\"300\" size=\"2.5rem\" secondary>\n              {getCurrentDate()}\n            </Text>\n          </p>\n        </div>\n        <Icon\n          hover\n          color=\"orange\"\n          size=\"3x\"\n          icon={isFavorite() ? solid : regular}\n          onIconClick={onToggleFavorites}\n        />\n      </PageHeader>\n      <PageBody>\n        <PageBodyLeft>\n          <SpanImage>\n            <img alt=\"weather icon\" src={current.weather_icons[0]} />\n          </SpanImage>\n          <div>\n            <h3>\n              <Text size=\"10rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </h3>\n            <h4>\n              <Text size=\"2.5rem\" weight=\"400\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </h4>\n          </div>\n        </PageBodyLeft>\n        <PageBodyRight>\n          <Tile.Group style={{ height: '100%' }}>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Wind Speed\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>\n                  {`${current.wind_speed} km/h`}\n                </Text>\n              </Tile.Body>\n              <Icon icon={faWind} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Wind Direction\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>\n                  {`${current.wind_dir}`}\n                </Text>\n              </Tile.Body>\n              <Icon icon={faCompass} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Pressure\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.pressure} mb`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloudscale} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Humidity\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.humidity} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faWater} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Cloud Cover\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.cloudcover} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloud} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Feels like\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${\n                  current.feelslike\n                } ${'\\u00b0'}C`}</Text>\n              </Tile.Body>\n              <Icon icon={faTemperatureLow} size=\"4x\" />\n            </Tile>\n          </Tile.Group>\n        </PageBodyRight>\n      </PageBody>\n    </>\n  );\n}\n\nexport default Weather;\n","import React, { useContext } from 'react';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// components\nimport Weather from '../../components/Weather';\nimport { ACTION_TYPES } from '../../constants';\n\nfunction SearchResult() {\n  const [{ loadingWeather, searchResult, favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  return (\n    <Weather\n      loading={loadingWeather}\n      weather={searchResult}\n      favorites={favorites}\n      onToggleFavorites={() =>\n        dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: searchResult })\n      }\n    />\n  );\n}\n\nexport default SearchResult;\n","import styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Text from '../Text';\n\nconst FlexHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nfunction Header({ title, subtitle, children }) {\n  return (\n    <FlexHeader>\n      <div>\n        <h2>\n          <Text size=\"2rem\" primary>\n            {title}\n          </Text>\n        </h2>\n        <p>\n          <Text size=\"1.5rem\" weight=\"200\" secondary>\n            {subtitle}\n          </Text>\n        </p>\n      </div>\n      {children}\n    </FlexHeader>\n  );\n}\n\nexport default Header;\n","import styled from 'styled-components';\n\nconst Body = styled.div``;\n\nexport default Body;\n","import styled from 'styled-components';\n\nconst Overlay = styled.div`\n  background: #fff;\n  padding: 0 1rem;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  top: 100%;\n  transition: all 0.2s ease-out;\n`;\n\nexport default Overlay;\n","import styled from 'styled-components';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Overlay from './Overlay';\n\nconst Card = styled.div`\n  border: 1px solid grey;\n  padding: 1rem;\n  position: relative;\n  transition: all 0.2s ease-out;\n\n  ${(props) =>\n    props.hover &&\n    `&:hover {\n    border: 1px solid deepskyblue;\n    transform: translateY(-10px);\n    .overlay {\n      opacity: 0.8;\n      top: 40%;\n    }\n  }`}\n`;\n\nCard.Header = Header;\nCard.Body = Body;\nCard.Overlay = Overlay;\n\nexport default Card;\n","import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: center;\n  height: 100%;\n\n  & > button:first-child {\n    margin-bottom: 5px;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: 1px solid slategray;\n  border-radius: 5rem;\n  font-size: 1.2rem;\n  padding: 5px 8px;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    cursor: pointer;\n    border: 1px solid deepskyblue;\n    color: deepskyblue;\n  }\n\n  &:active {\n    transform: translateY(5px);\n  }\n`;\n\nButton.Group = ButtonGroup;\n\nexport default Button;\n","import React, { useContext } from 'react';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\nimport { faFolderOpen } from '@fortawesome/free-regular-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\nimport Text from '../../components/Text';\n// etc\nimport { ACTION_TYPES } from '../../constants';\nimport Empty from '../../components/Empty';\n\nfunction Favorites() {\n  const [{ favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const history = useHistory();\n\n  const renderFavorites = () => {\n    return favorites.map((favorite, idx) => {\n      const { current, location } = favorite;\n      return (\n        <Card key={idx} hover>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <Icon\n              hover\n              color=\"orange\"\n              size=\"2x\"\n              icon={faStar}\n              onIconClick={() =>\n                dispatch({\n                  type: ACTION_TYPES.TOGGLE_FAVORITES,\n                  weather: favorite\n                })\n              }\n            />\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button\n                onClick={() =>\n                  history.push('/details', {\n                    weather: favorite,\n                    query: location.name\n                  })\n                }\n              >\n                Learn more\n              </Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>{`Favorites (${favorites.length})`}</Text>\n        </h2>\n      </div>\n      {favorites.length === 0 ? (\n        <Empty size=\"6x\" text=\"No favorites\" icon={faFolderOpen} />\n      ) : (\n        <Grid style={{ minHeight: '14.25rem' }}>{renderFavorites()}</Grid>\n      )}\n    </>\n  );\n}\n\nexport default Favorites;\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  faStar as regular,\n  faFolderOpen\n} from '@fortawesome/free-regular-svg-icons';\nimport { faStar as solid, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useCities from '../../hooks/useCities';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\nimport Empty from '../../components/Empty';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\n// @TODO add list of cities in context\n\nfunction TopCities() {\n  const [{ cities, loadingCities, favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const history = useHistory();\n  const { fetchCities } = useCities();\n\n  useEffect(() => {\n    if (cities.length === 0) {\n      fetchCities();\n    }\n  }, [cities, fetchCities]);\n\n  const getFavoritesName = () => {\n    let lookup = {};\n    for (let city of favorites) {\n      lookup[city.location.name] = city.location.name;\n    }\n    return lookup;\n  };\n\n  const handleRemoveCity = (cityIdx) => {\n    dispatch({ type: ACTION_TYPES.REMOVE_CITY, cityIdx });\n  };\n\n  const renderCities = () => {\n    const fav = getFavoritesName();\n\n    return cities.map((city, idx) => {\n      const { current, location } = city;\n      return (\n        <Card key={idx} hover>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <Icon\n              hover\n              color=\"orange\"\n              size=\"2x\"\n              icon={fav[location.name] ? solid : regular}\n              onIconClick={() =>\n                dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: city })\n              }\n            />\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button\n                onClick={() =>\n                  history.push('/details', {\n                    weather: city,\n                    query: location.name\n                  })\n                }\n              >\n                Learn more\n              </Button>\n              <Button onClick={() => handleRemoveCity(idx)}>Remove</Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>\n            Top 15 cities by Population (A-Z)\n          </Text>\n        </h2>\n      </div>\n      {loadingCities ? (\n        <Empty\n          size=\"6x\"\n          text={loadingCities ? 'Loading cities...' : 'No cities found'}\n          icon={loadingCities ? faSpinner : faFolderOpen}\n          spin={loadingCities}\n        />\n      ) : (\n        <Grid>{renderCities()}</Grid>\n      )}\n    </>\n  );\n}\n\nexport default TopCities;\n","import { useState, useCallback, useContext } from 'react';\nimport axios from 'axios';\n\nimport WeatherContext from '../context/WeatherContext';\n\nimport { WEATHER_BASE_URL, ACTION_TYPES } from '../constants';\n\nexport default function useCities() {\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n  const [errorCitiesMsg, setErrorCitiesMsg] = useState();\n\n  const fetchCities = useCallback(async () => {\n    const { data: topCities } = await axios.get('cities.json');\n    const query = topCities\n      .reduce((prev, curr) => [...prev, curr.Name], [])\n      .join(';');\n\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      dispatch({ type: ACTION_TYPES.LOADING_CITIES, loading: true });\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, {\n        params\n      });\n      const sortedCities = data.sort((a, b) =>\n        a.location.name.localeCompare(b.location.name)\n      );\n      // window.localStorage.setItem('storedCities', JSON.stringify(sortedCities));\n      // const data = window.localStorage.getItem('storedCities');\n      // dispatch({ type: ACTION_TYPES.ADD_CITIES, cities: JSON.parse(data) });\n      dispatch({ type: ACTION_TYPES.ADD_CITIES, cities: sortedCities });\n    } catch (error) {\n      setErrorCitiesMsg(error);\n    } finally {\n      dispatch({ type: ACTION_TYPES.LOADING_CITIES, loading: false });\n    }\n  }, [dispatch]);\n\n  return {\n    fetchCities,\n    errorCitiesMsg\n  };\n}\n","import React from 'react';\n// components\nimport Container from '../../components/Container';\nimport Search from '../Search';\nimport SearchResult from '../SearchResult';\nimport Favorites from '../Favorites';\nimport TopCities from '../TopCities';\n\nfunction Home() {\n  return (\n    <Container>\n      <Container.Panel>\n        <header>\n          <Search />\n        </header>\n      </Container.Panel>\n      <main>\n        <Container.Panel>\n          <SearchResult />\n        </Container.Panel>\n        <Container.Panel>\n          <Favorites />\n        </Container.Panel>\n        <Container.Panel>\n          <TopCities />\n        </Container.Panel>\n      </main>\n    </Container>\n  );\n}\n\nexport default Home;\n","import styled from 'styled-components';\n\nconst Title = styled.h2`\n  font-family: 'Fredoka One';\n  font-size: 3rem;\n  margin-bottom: 2.5rem;\n`;\n\nexport default Title;\n","import styled from 'styled-components';\nimport Title from './Title';\n\nconst Panel = styled.div`\n  margin-bottom: 2.5rem;\n`;\n\nPanel.Title = Title;\n\nexport default Panel;\n","import React from 'react';\nimport {\n  faSun,\n  faMoon,\n  faFolderOpen\n} from '@fortawesome/free-regular-svg-icons';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\n// context\nimport useForecast from '../../hooks/useForecast';\n// components\nimport Card from '../Card';\nimport Grid from '../Grid';\nimport Text from '../Text';\nimport Icon from '../Icon';\nimport Empty from '../Empty';\n// etc\nimport { WEEKDAYS } from '../../constants';\n\nfunction Forecast({ cityData }) {\n  const { forecast, isLoadingForecoast } = useForecast(cityData);\n\n  const renderForecast = () => {\n    const dates = [];\n    for (let day in forecast) {\n      const name = new Date(forecast[day].date).getDay();\n      dates.push(\n        <Card key={day}>\n          <Card.Header title={WEEKDAYS[name]} />\n          <Card.Body\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              marginBottom: '1rem'\n            }}\n          >\n            <div style={{ flex: 1 }}>\n              <Text size=\"5rem\" secondary>\n                {forecast[day].avgtemp}&deg;\n              </Text>\n            </div>\n            <div\n              style={{\n                flex: 1,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n              }}\n            >\n              <div>\n                <Text size=\"1.5rem\" primary>\n                  max:&nbsp;\n                </Text>\n                <Text size=\"1.8rem\" secondary>\n                  {forecast[day].maxtemp}&deg;\n                </Text>\n              </div>\n              <div>\n                <Text size=\"1.5rem\" primary>\n                  min:&nbsp;\n                </Text>\n                <Text size=\"1.8rem\" secondary>\n                  {forecast[day].mintemp}&deg;\n                </Text>\n              </div>\n            </div>\n          </Card.Body>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <Icon icon={faSun} size=\"2x\" />\n            <Text size=\"1.3rem\" secondary>\n              {forecast[day].astro.sunrise}\n            </Text>\n            <Icon icon={faMoon} size=\"2x\" />\n            <Text size=\"1.3rem\" secondary>\n              {forecast[day].astro.moonrise}\n            </Text>\n          </div>\n        </Card>\n      );\n    }\n    return dates;\n  };\n\n  return (\n    <>\n      {Object.keys(forecast).length === 0 ? (\n        <Empty\n          size=\"6x\"\n          text={isLoadingForecoast ? 'Loading forecast...' : 'No forecast'}\n          icon={isLoadingForecoast ? faSpinner : faFolderOpen}\n          spin={isLoadingForecoast}\n        />\n      ) : (\n        <Grid style={{ minHeight: '14.25rem' }}>{renderForecast()}</Grid>\n      )}\n    </>\n  );\n}\n\nexport default Forecast;\n","import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useForecast(query) {\n  const [forecast, setForecast] = useState({});\n  const [isLoadingForecoast, setIsLoadingForecast] = useState(false);\n  const [errorForecastMsg, setErrorForecastMsg] = useState('');\n\n  const fetchData = useCallback(async () => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      forecast_days: 7,\n      query\n    };\n\n    try {\n      setIsLoadingForecast(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/forecast`, {\n        params\n      });\n      setForecast(data.forecast);\n    } catch (error) {\n      setErrorForecastMsg(error);\n    } finally {\n      setIsLoadingForecast(false);\n    }\n  }, [query]);\n\n  useEffect(() => {\n    fetchData(query);\n  }, [fetchData, query]);\n\n  return {\n    forecast,\n    isLoadingForecoast,\n    errorForecastMsg\n  };\n}\n","import React from 'react';\nimport { faFolderOpen } from '@fortawesome/free-regular-svg-icons';\nimport Empty from '../Empty';\n\nfunction Notes() {\n  const notes = [];\n\n  return (\n    <>\n      {notes.length === 0 ? (\n        <Empty size=\"6x\" text=\"No notes\" icon={faFolderOpen} />\n      ) : (\n        <div></div>\n      )}\n    </>\n  );\n}\n\nexport default Notes;\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useWeather from '../../hooks/useWeather';\n// components\nimport Container from '../../components/Container';\nimport Panel from '../../components/Panel';\nimport Weather from '../../components/Weather';\nimport Forecast from '../../components/Forecast';\nimport Notes from '../../components/Notes';\nimport Button from '../../components/Button';\nimport Icon from '../../components/Icon';\nimport Text from '../../components/Text';\n// etc\nimport { ACTION_TYPES } from '../../constants';\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons';\n\nfunction City(props) {\n  const { query } = props.history.location.state;\n\n  const [{ weather, loadingWeather, favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n\n  const history = useHistory();\n  const { fetchWeather } = useWeather();\n\n  useEffect(() => {\n    if (query) {\n      fetchWeather(query, ACTION_TYPES.SET_WEATHER_CURRENT);\n    }\n  }, [fetchWeather, query]);\n\n  return (\n    <Container>\n      <Panel>\n        <Button onClick={() => history.push('/')}>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <Icon icon={faChevronLeft} size=\"2x\" />\n            <Text style={{ marginLeft: '1rem' }} size=\"1.5rem\" secondary>Back to home&nbsp;&nbsp;&nbsp;</Text>\n          </div>\n        </Button>\n      </Panel>\n      <Panel>\n        <Weather\n          loading={loadingWeather}\n          weather={weather}\n          favorites={favorites}\n          onToggleFavorites={() =>\n            dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather })\n          }\n        />\n      </Panel>\n      <Panel>\n        <Panel.Title>7-day Forecast</Panel.Title>\n        <Forecast cityData={query} />\n      </Panel>\n      <Panel>\n        <Panel.Title>Notes</Panel.Title>\n        <Notes />\n      </Panel>\n    </Container>\n  );\n}\n\nexport default City;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// context\nimport WeatherContext from './context/WeatherContext';\n// components\nimport Home from './containers/Home';\nimport City from './containers/City';\n// @todo add 404 catch all route\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL + '/'}>\n      <WeatherContext.WeatherStateProvider>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/details\" component={City} />\n        </Switch>\n      </WeatherContext.WeatherStateProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport whyDidYouRender from '@welldone-software/why-did-you-render';\n\nimport './index.css';\nimport App from './App';\n\nwhyDidYouRender(React, {\n  onlyLogs: true,\n  titleColor: 'green',\n  diffNameColor: 'darkturquoise'\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}