{"version":3,"sources":["constants.js","context/WeatherContext.js","components/Container/index.js","hooks/useWeather.js","containers/Search/Search.js","hooks/useLookup.js","hooks/useGeoLocation.js","components/Icon/index.js","components/Text/index.js","components/Tile/TileGroup.js","components/Tile/TileBody.js","components/Tile/index.js","components/Weather/Weather.js","containers/SearchResult/SearchResult.js","components/Grid/index.js","components/Card/Header.js","components/Card/Body.js","components/Card/Overlay.js","components/Card/index.js","components/Button/index.js","containers/Favorites/Favorites.js","containers/TopCities/TopCities.js","hooks/useCities.js","containers/Home/Home.js","containers/City/City.js","hooks/useForecast.js","App.js","index.js"],"names":["WEATHER_BASE_URL","ACTION_TYPES","SEARCH_RESULT","SET_WEATHER_CURRENT","SET_WEATHER_FORECAST","ADD_CITIES","REMOVE_CITY","TOGGLE_FAVORITES","initialState","searchResult","weather","cities","favorites","reducer","state","action","type","slice","cityIdx","name","location","cityIndex","findIndex","city","sort","a","b","localeCompare","WeatherStateContext","createContext","WeatherStateProvider","children","Provider","value","useReducer","Container","styled","div","useWeather","useContext","WeatherContext","dispatch","useState","isLoadingWeather","setIsLoadingWeather","errorMessage","setErrorMessage","fetchWeather","useCallback","query","actionType","params","access_key","process","axios","get","data","error","info","SearchWrapper","SearchContainer","SearchButton","button","SearchLocation","Search","setQuery","history","useHistory","results","setResults","isLookingUp","setIsLookingUp","errorLookupMsg","setErrorLookupMsg","lookup","useLookup","options","position","setPosition","setError","onSuccess","coords","latitude","longitude","onError","getPosition","geolocation","navigator","getCurrentPosition","useGeoLocation","debounceSearch","useMemo","debounce","useEffect","push","onSubmit","e","preventDefault","searchStr","target","focusInputOnSuggestionClick","inputProps","placeholder","onChange","newValue","suggestions","onSuggestionsFetchRequested","reason","cancel","onSuggestionsClearRequested","onSuggestionSelected","suggestionValue","getSuggestionValue","suggestion","region","country","renderSuggestion","size","icon","faSpinner","faSearch","spin","style","marginTop","textAlign","onClick","Icon","FontAwesomeIcon","props","color","Text","span","primary","secondary","weight","TileGroup","TileBody","Tile","Group","Body","PageHeader","header","PageBody","PageBodyLeft","PageBodyRight","SpanImage","ReloadSpan","Weather","onToggleFavorites","onReloadClick","current","Object","keys","length","display","faSync","Date","localtime_epoch","toDateString","favorite","solid","regular","alt","src","weather_icons","temperature","weather_descriptions","height","wind_speed","faWind","wind_dir","faCompass","pressure","faCloudscale","humidity","faWater","cloudcover","faCloud","feelslike","faTemperatureLow","SearchResult","Grid","FlexHeader","Header","title","subtitle","Overlay","Card","ButtonGroup","Button","Favorites","marginBottom","minHeight","map","idx","key","faStar","className","TopCities","isLoadingCities","errorCitiesMsg","useCities","fav","getFavoritesName","renderCities","SegmentWrapper","Home","City","forecast","isFetchingForecast","setIsFetchingForecast","setErrorForecastMsg","fetchData","forecast_days","console","log","useForecast","App","basename","exact","path","component","whyDidYouRender","React","onlyLogs","titleColor","diffNameColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef90564b.chunk.js","sourcesContent":["export const WEATHER_BASE_URL = 'https://api.weatherstack.com';\nexport const ACTION_TYPES = {\n  SEARCH_RESULT: 'SEARCH_RESULT',\n  SET_WEATHER_CURRENT: 'SET_WEATHER_CURRENT',\n  SET_WEATHER_FORECAST: 'SET_WEATHER_FORECAST',\n  ADD_CITIES: 'ADD_CITIES',\n  REMOVE_CITY: 'REMOVE_CITY',\n  TOGGLE_FAVORITES: 'TOGGLE_FAVORITES'\n};\n","import React, { createContext, useReducer } from 'react';\nimport { ACTION_TYPES } from '../constants';\n\nconst initialState = {\n  searchResult: {}, // weather data from searching\n  weather: {}, // weather data from clicking a card/city\n  cities: [],\n  favorites: []\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.SEARCH_RESULT: {\n      return {\n        ...state,\n        searchResult: action.weather\n      };\n    }\n    case ACTION_TYPES.SET_WEATHER_CURRENT: {\n      return {\n        ...state,\n        weather: action.weather\n      };\n    }\n    case ACTION_TYPES.ADD_CITIES: {\n      return {\n        ...state,\n        cities: action.cities\n      };\n    }\n    case ACTION_TYPES.REMOVE_CITY: {\n      return {\n        ...state,\n        cities: [\n          ...state.cities.slice(0, action.cityIdx),\n          ...state.cities.slice(action.cityIdx + 1)\n        ]\n      };\n    }\n    case ACTION_TYPES.TOGGLE_FAVORITES: {\n      const { name } = action.weather.location;\n      const cityIndex = state.favorites.findIndex(\n        (city) => city.location.name === name\n      );\n      // favorites must be unique\n      // then remove if selected again\n      if (cityIndex === -1) {\n        const favorites = [...state.favorites, action.weather].sort((a, b) =>\n          a.location.name.localeCompare(b.location.name)\n        );\n        return {\n          ...state,\n          favorites\n        };\n      } else {\n        return {\n          ...state,\n          favorites: [\n            ...state.favorites.slice(0, cityIndex),\n            ...state.favorites.slice(cityIndex + 1)\n          ]\n        };\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nconst WeatherStateContext = createContext();\n\nconst WeatherStateProvider = ({ children }) => {\n  return (\n    <WeatherStateContext.Provider value={useReducer(reducer, initialState)}>\n      {children}\n    </WeatherStateContext.Provider>\n  );\n};\n\nexport default { WeatherStateContext, WeatherStateProvider };\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  padding: 10rem 20rem;\n`;\n\nexport default Container;\n","import { useState, useCallback, useContext } from 'react';\nimport axios from 'axios';\n\nimport WeatherContext from '../context/WeatherContext';\n\nimport { WEATHER_BASE_URL, ACTION_TYPES } from '../constants';\n\nexport default function useWeather() {\n  const [, dispatch] = useContext(WeatherContext.WeatherStateContext);\n\n  const [isLoadingWeather, setIsLoadingWeather] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const fetchWeather = useCallback(\n    async (query, actionType) => {\n      const params = {\n        access_key: process.env.REACT_APP_WEATHER_API_KEY,\n        query\n      };\n\n      try {\n        setIsLoadingWeather(true);\n        const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, {\n          params\n        });\n        if (data.error) {\n          setErrorMessage(data.error.info);\n        } else {\n          dispatch({ type: ACTION_TYPES[actionType], weather: data });\n        }\n      } catch (error) {\n        setErrorMessage(error);\n      } finally {\n        setIsLoadingWeather(false);\n      }\n    },\n    [dispatch]\n  );\n\n  return {\n    fetchWeather,\n    isLoadingWeather,\n    errorMessage\n  };\n}\n","import React, { useEffect, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport Autosuggest from 'react-autosuggest';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner } from '@fortawesome/free-solid-svg-icons';\n// hooks\nimport { useHistory } from 'react-router-dom';\nimport useLookup from '../../hooks/useLookup';\nimport useWeather from '../../hooks/useWeather';\nimport { useGeoLocation } from '../../hooks/useGeoLocation';\n// useEffect\nimport { ACTION_TYPES } from '../../constants';\n\nconst SearchWrapper = styled.div`\n  margin: 0 auto;\n  max-width: 60rem;\n`;\n\nconst SearchContainer = styled.div`\n  & {\n    display: flex;\n\n    & .react-autosuggest {\n      &__container {\n        flex: 1;\n        position: relative;\n      }\n\n      &__input {\n        border: 2px solid var(--color-lightgrey);\n        font-family: 'Fredoka One', cursive;\n        font-size: 2.5rem;\n        letter-spacing: 2px;\n        padding: 1rem 4rem 1rem 1rem;\n        outline: none;\n        transition: all 0.2s ease-in-out;\n        width: 100%;\n\n        &::placeholder {\n          color: var(--color-lightgrey);\n        }\n\n        &:focus {\n          border: 2px solid var(--color-lightslategrey);\n\n          &::placeholder {\n            color: var(--color-lightslategrey);\n          }\n        }\n\n        &--open {\n          border-bottom-left-radius: 0;\n          border-bottom-right-radius: 0;\n        }\n      }\n\n      &__suggestions {\n        &-container {\n          display: none;\n        }\n\n        &-container--open {\n          display: block;\n          position: absolute;\n          top: 6rem;\n          width: 100%;\n          border: 2px solid var(--color-lightslategrey);\n          background-color: #fff;\n          font-family: Raleway;\n          font-weight: 400;\n          font-size: 1.6rem;\n          z-index: 10;\n        }\n\n        &-list {\n          margin: 0;\n          padding: 0;\n          list-style-type: none;\n        }\n      }\n\n      &__suggestion {\n        cursor: pointer;\n        padding: 1rem 2rem;\n\n        &--highlighted {\n          background-color: var(--color-lightslategrey);\n        }\n      }\n    }\n  }\n`;\n\nconst SearchButton = styled.button`\n  background-color: transparent;\n  border: none;\n  margin-left: -3.5rem;\n  z-index: 10;\n  transition: all 0.2s ease-in-out;\n\n  &:active {\n    transform: translateY(5px);\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst SearchLocation = styled.button`\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n\n  > span {\n    font-family: Raleway;\n    font-size: 1.5rem;\n    font-weight: 600;\n    text-decoration: underline;\n  }\n`;\n\nfunction Search() {\n  const [query, setQuery] = useState('');\n\n  const history = useHistory();\n  const { fetchWeather, isLoadingWeather } = useWeather();\n  const { results, isLookingUp, lookup } = useLookup();\n  const { position, getPosition } = useGeoLocation();\n\n  const debounceSearch = useMemo(() => debounce(lookup, 400), [lookup]);\n\n  useEffect(() => {\n    if (position) {\n      // we navigate to details page once\n      // user allows location access\n      history.push('/details', {\n        query,\n        position\n      });\n    }\n  }, [position, history, query]);\n\n  const handleChange = (e, { newValue }) => {\n    setQuery(newValue);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchStr = e.target[0].value;\n    // call API if input is not blank\n    if (searchStr !== '') {\n      fetchWeather(searchStr, ACTION_TYPES.SEARCH_RESULT);\n    }\n  };\n  // populates the input value upon mouse/keyboard click\n  const getSuggestionValue = (suggestion) => {\n    return `${suggestion.name}, ${suggestion.region}, ${suggestion.country}`;\n  };\n  // renders the list of suggestions via dropdown container\n  const renderSuggestion = (suggestion) => {\n    return (\n      <span>{`${suggestion.name}, ${suggestion.region}, ${suggestion.country}`}</span>\n    );\n  };\n\n  const onSuggestionsFetchRequested = ({ reason, value }) => {\n    if (reason === 'input-changed') {\n      debounceSearch(value);\n    } else {\n      debounceSearch.cancel();\n    }\n  };\n  // triggers api call when clicking a city inside select options\n  // by default, this only works on keydown\n  const onSuggestionSelected = (e, { suggestionValue }) => {\n    if (e.type === 'click') {\n      fetchWeather(suggestionValue, ACTION_TYPES.SEARCH_RESULT);\n    }\n  };\n\n  return (\n    <SearchWrapper>\n      <form onSubmit={handleSubmit}>\n        <SearchContainer>\n          <Autosuggest\n            focusInputOnSuggestionClick={false}\n            inputProps={{\n              placeholder: 'Enter a city name',\n              onChange: handleChange,\n              value: query\n            }}\n            suggestions={results}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={() => {}}\n            onSuggestionSelected={onSuggestionSelected}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n          />\n          <SearchButton>\n            <FontAwesomeIcon\n              size=\"2x\"\n              icon={isLookingUp || isLoadingWeather ? faSpinner : faSearch}\n              spin={isLookingUp || isLoadingWeather}\n            />\n          </SearchButton>\n        </SearchContainer>\n      </form>\n      <div style={{ marginTop: '1rem', textAlign: 'center' }}>\n        <SearchLocation onClick={() => getPosition()}>\n          <span>Or use my location</span>\n        </SearchLocation>\n      </div>\n    </SearchWrapper>\n  );\n}\n\nexport default Search;\n","import { useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useLookup() {\n  const [results, setResults] = useState([]);\n  const [isLookingUp, setIsLookingUp] = useState(false);\n  const [errorLookupMsg, setErrorLookupMsg] = useState({});\n\n  const lookup = useCallback(async (query) => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsLookingUp(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/autocomplete`, {\n        params\n      });\n      if (data.error) {\n        setErrorLookupMsg(data.error.info);\n      } else {\n        setResults(data.results);\n      }\n    } catch (error) {\n      setErrorLookupMsg(error);\n    } finally {\n      setIsLookingUp(false);\n    }\n  }, []);\n\n  return {\n    results,\n    setResults,\n    isLookingUp,\n    lookup,\n    errorLookupMsg\n  };\n}\n","import { useState, useCallback } from 'react';\n\nexport function useGeoLocation(options = {}) {\n  const [position, setPosition] = useState();\n  const [error, setError] = useState();\n\n  const onSuccess = (position) => {\n    const { latitude, longitude } = position.coords;\n    setPosition(`${latitude},${longitude}`);\n  };\n\n  const onError = (error) => {\n    setError(error);\n  };\n\n  const getPosition = useCallback(() => {\n    const { geolocation } = navigator;\n\n    if (!geolocation) {\n      setError('Geolocation is not supported.');\n      return;\n    }\n\n    geolocation.getCurrentPosition(onSuccess, onError, options);\n  }, [options]);\n\n  return {\n    position,\n    getPosition,\n    error\n  };\n}\n","import styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Icon = styled(FontAwesomeIcon)`\n  &&& {\n    cursor: 'pointer';\n    ${(props) => props.color && `color: ${props.color}`};\n  }\n`;\n\nexport default Icon;\n","import styled from 'styled-components';\n\nconst Text = styled.span`\n  ${(props) => props.primary && `font-family: 'Fredoka One'`};\n  ${(props) => props.secondary && `font-family: 'Raleway'`};\n  ${(props) => props.weight && `font-weight: ${props.weight}`};\n  ${(props) => props.size && `font-size: ${props.size}`};\n`;\n\nexport default Text;\n","import styled from 'styled-components';\n\nconst TileGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n  text-align: center;\n  align-items: center;\n`;\n\nexport default TileGroup;\n","import styled from 'styled-components';\n\nconst TileBody = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nexport default TileBody;\n","import styled from 'styled-components';\n\nimport TileGroup from './TileGroup';\nimport TileBody from './TileBody';\n\nconst Tile = styled.div`\n  display: inline-block;\n`;\n\nTile.Group = TileGroup;\nTile.Body = TileBody;\n\nexport default Tile;\n","import React from 'react';\nimport styled from 'styled-components';\nimport {\n  faStar as regular,\n  faCompass\n} from '@fortawesome/free-regular-svg-icons';\nimport {\n  faStar as solid,\n  faWind,\n  faWater,\n  faCloud,\n  faTemperatureLow,\n  faSync\n} from '@fortawesome/free-solid-svg-icons';\nimport { faCloudscale } from '@fortawesome/free-brands-svg-icons';\n// components\nimport Icon from '../Icon';\nimport Text from '../Text';\nimport Tile from '../Tile';\n\nconst PageHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 2.5rem;\n\n  h2 {\n    margin-bottom: 1rem;\n  }\n`;\n\nconst PageBody = styled.div`\n  display: flex;\n`;\n\nconst PageBodyLeft = styled.div`\n  display: flex;\n  flex-basis: 40%;\n  justify-content: space-evenly;\n`;\n\nconst PageBodyRight = styled.div`\n  flex: 1;\n`;\n\nconst SpanImage = styled.span`\n  align-self: flex-end;\n\n  & > img {\n    border-radius: 10rem;\n    height: 12rem;\n    width: 12rem;\n  }\n`;\n\nconst ReloadSpan = styled.span`\n  display: 'inline-block';\n  margin-left: 2rem;\n  vertical-align: super;\n`;\n\nfunction Weather({ weather, favorites, onToggleFavorites, onReloadClick }) {\n  const { current, location } = weather;\n\n  const getCityName = () => {\n    return `${location.name}, ${location.country}`;\n  };\n\n  const getCurrentDate = () => {\n    return new Date(location.localtime_epoch * 1000).toDateString();\n  };\n\n  const isFavorite = () => {\n    const idx = favorites.findIndex(\n      (favorite) => favorite.location.name === location.name\n    );\n    return idx !== -1;\n  };\n\n  if (Object.keys(weather).length === 0) return null;\n\n  return (\n    <>\n      <PageHeader>\n        <div>\n          <h2 style={{ display: 'inline-block' }}>\n            <Text size=\"3rem\" primary>\n              {getCityName()}\n            </Text>\n          </h2>\n          <ReloadSpan onClick={onReloadClick}>\n            <Icon icon={faSync} size=\"2x\" />\n          </ReloadSpan>\n          <p>\n            <Text weight=\"300\" size=\"2.5rem\" secondary>\n              {getCurrentDate()}\n            </Text>\n          </p>\n        </div>\n        <span onClick={onToggleFavorites}>\n          <Icon\n            color=\"orange\"\n            icon={isFavorite() ? solid : regular}\n            size=\"3x\"\n          />\n        </span>\n      </PageHeader>\n      <PageBody>\n        <PageBodyLeft>\n          <SpanImage>\n            <img alt=\"weather icon\" src={current.weather_icons[0]} />\n          </SpanImage>\n          <div>\n            <h3>\n              <Text size=\"10rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </h3>\n            <h4>\n              <Text size=\"2.5rem\" weight=\"400\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </h4>\n          </div>\n        </PageBodyLeft>\n        <PageBodyRight>\n          <Tile.Group style={{ height: '100%' }}>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Wind Speed\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>\n                  {`${current.wind_speed} km/h`}\n                </Text>\n              </Tile.Body>\n              <Icon icon={faWind} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Wind Direction\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>\n                  {`${current.wind_dir}`}\n                </Text>\n              </Tile.Body>\n              <Icon icon={faCompass} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Pressure\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.pressure} mb`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloudscale} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Humidity\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.humidity} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faWater} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Cloud Cover\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${current.cloudcover} %`}</Text>\n              </Tile.Body>\n              <Icon icon={faCloud} size=\"4x\" />\n            </Tile>\n            <Tile>\n              <Text size=\"2rem\" weight=\"300\" primary>\n                Feels like\n              </Text>\n              <Tile.Body>\n                <Text size=\"2.5rem\" secondary>{`${\n                  current.feelslike\n                } ${'\\u00b0'}C`}</Text>\n              </Tile.Body>\n              <Icon icon={faTemperatureLow} size=\"4x\" />\n            </Tile>\n          </Tile.Group>\n        </PageBodyRight>\n      </PageBody>\n    </>\n  );\n}\n\nexport default Weather;\n","import React, { useContext } from 'react';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// components\nimport Weather from '../../components/Weather';\nimport { ACTION_TYPES } from '../../constants';\n\nfunction SearchResult() {\n  const [{ searchResult, favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n\n  return (\n    <Weather\n      weather={searchResult}\n      favorites={favorites}\n      onToggleFavorites={() =>\n        dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: searchResult })\n      }\n      onReloadClick={() => {}}\n    />\n  );\n}\n\nexport default SearchResult;\n","import styled from 'styled-components';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-column-gap: 2rem;\n  grid-row-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n`;\n\nexport default Grid;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Text from '../Text';\n\nconst FlexHeader = styled.header`\n  display: flex;\n  justify-content: space-between;\n`;\n\nfunction Header({ title, subtitle, children }) {\n  return (\n    <FlexHeader>\n      <div>\n        <h2>\n          <Text size=\"2rem\" primary>\n            {title}\n          </Text>\n        </h2>\n        <p>\n          <Text size=\"1.5rem\" weight=\"200\" secondary>\n            {subtitle}\n          </Text>\n        </p>\n      </div>\n      {children}\n    </FlexHeader>\n  );\n}\n\nexport default Header;\n","import styled from 'styled-components';\n\nconst Body = styled.div``;\n\nexport default Body;\n","import styled from 'styled-components';\n\nconst Overlay = styled.div`\n  background: #fff;\n  padding: 0 1rem;\n  position: absolute;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  top: 100%;\n  transition: all 0.2s ease-out;\n`;\n\nexport default Overlay;\n","import styled from 'styled-components';\n\nimport Header from './Header';\nimport Body from './Body';\nimport Overlay from './Overlay';\n\nconst Card = styled.div`\n  border: 1px solid grey;\n  padding: 1rem;\n  position: relative;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    border: 1px solid deepskyblue;\n    transform: translateY(-10px);\n    .overlay {\n      opacity: 0.8;\n      top: 40%;\n    }\n  }\n`;\n\nCard.Header = Header;\nCard.Body = Body;\nCard.Overlay = Overlay;\n\nexport default Card;\n","import styled from 'styled-components';\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  justify-content: center;\n  height: 100%;\n\n  & > button:first-child {\n    margin-bottom: 5px;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  border: 1px solid slategray;\n  border-radius: 5rem;\n  font-size: 1.2rem;\n  padding: 5px 8px;\n  transition: all 0.2s ease-out;\n\n  &:hover {\n    border: 1px solid deepskyblue;\n    color: deepskyblue;\n  }\n\n  &:active {\n    transform: translateY(5px);\n  }\n`;\n\nButton.Group = ButtonGroup;\n\nexport default Button;\n","import React, { useContext } from 'react';\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport { useHistory } from 'react-router-dom';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\nimport Text from '../../components/Text';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nfunction Favorites() {\n  const [{ favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const history = useHistory();\n\n  const renderFavorites = () => {\n    return favorites.map((favorite, idx) => {\n      const { current, location } = favorite;\n      return (\n        <Card key={idx}>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <span\n              onClick={() =>\n                dispatch({\n                  type: ACTION_TYPES.TOGGLE_FAVORITES,\n                  weather: favorite\n                })\n              }\n            >\n              <Icon color=\"orange\" icon={faStar} size=\"2x\" />\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button\n                onClick={() =>\n                  history.push('/details', {\n                    weather: favorite,\n                    query: location.name\n                  })\n                }\n              >\n                Learn more\n              </Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>{`Favorites (${favorites.length})`}</Text>\n        </h2>\n      </div>\n      <Grid style={{ minHeight: '14.25rem' }}>{renderFavorites()}</Grid>\n    </>\n  );\n}\n\nexport default Favorites;\n","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { faStar as regular } from '@fortawesome/free-regular-svg-icons';\nimport { faStar as solid } from '@fortawesome/free-solid-svg-icons';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useCities from '../../hooks/useCities';\n// components\nimport Grid from '../../components/Grid';\nimport Card from '../../components/Card';\nimport Text from '../../components/Text';\nimport Icon from '../../components/Icon';\nimport Button from '../../components/Button';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\n// @TODO add list of cities in context\n\nfunction TopCities() {\n  const [{ cities, favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n  const history = useHistory();\n\n  const { isLoadingCities } = useCities();\n\n  const getFavoritesName = () => {\n    let lookup = {};\n    for (let city of favorites) {\n      lookup[city.location.name] = city.location.name;\n    }\n    return lookup;\n  };\n\n  const handleRemoveCity = (cityIdx) => {\n    dispatch({ type: ACTION_TYPES.REMOVE_CITY, cityIdx });\n  };\n\n  const renderCities = () => {\n    const fav = getFavoritesName();\n\n    return cities.map((city, idx) => {\n      const { current, location } = city;\n      return (\n        <Card key={idx}>\n          <Card.Header title={location.name} subtitle={location.region}>\n            <span\n              onClick={() =>\n                dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather: city })\n              }\n            >\n              <Icon\n                color=\"orange\"\n                icon={fav[location.name] ? solid : regular}\n                size=\"2x\"\n              />\n            </span>\n          </Card.Header>\n          <Card.Body>\n            <div>\n              <Text size=\"5rem\" secondary>\n                {current.temperature}&deg;\n              </Text>\n            </div>\n            <p>\n              <Text size=\"1.5rem\" weight=\"200\" secondary>\n                {current.weather_descriptions[0]}\n              </Text>\n            </p>\n          </Card.Body>\n          <Card.Overlay className=\"overlay\">\n            <Button.Group>\n              <Button\n                onClick={() =>\n                  history.push('/details', {\n                    weather: city,\n                    query: location.name\n                  })\n                }\n              >\n                Learn more\n              </Button>\n              <Button onClick={() => handleRemoveCity(idx)}>Remove</Button>\n            </Button.Group>\n          </Card.Overlay>\n        </Card>\n      );\n    });\n  };\n\n  return (\n    <>\n      <div style={{ marginBottom: '2.5rem' }}>\n        <h2>\n          <Text size=\"3rem\" primary>\n            Top 15 cities by population (A-Z)\n          </Text>\n        </h2>\n      </div>\n      <Grid>{renderCities()}</Grid>\n    </>\n  );\n}\n\nexport default TopCities;\n","import { useState, useContext } from 'react';\nimport axios from 'axios';\n\nimport WeatherContext from '../context/WeatherContext';\n\nimport { WEATHER_BASE_URL, ACTION_TYPES } from '../constants';\n\nexport default function useCities() {\n  const [{ cities }, dispatch] = useContext(WeatherContext.WeatherStateContext);\n\n  const [isLoadingCities, setIsLoadingCities] = useState(false);\n  const [errorCitiesMsg, setErrorCitiesMsg] = useState();\n\n  const fetchData = async () => {\n    const { data: topCities } = await axios.get('cities.json');\n    const query = topCities\n      .reduce((prev, curr) => [...prev, curr.Name], [])\n      .join(';');\n\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      query\n    };\n\n    try {\n      setIsLoadingCities(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/current`, {\n        params\n      });\n      const sortedCities = data.sort((a, b) =>\n        a.location.name.localeCompare(b.location.name)\n      );\n      dispatch({ type: ACTION_TYPES.ADD_CITIES, cities: sortedCities });\n    } catch (error) {\n      setErrorCitiesMsg(error);\n    } finally {\n      setIsLoadingCities(false);\n    }\n  };\n\n  useState(() => {\n    if (cities.length === 0) {\n      // fetchData();\n    }\n  }, []);\n\n  return {\n    isLoadingCities,\n    errorCitiesMsg\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components';\n// components\nimport Container from '../../components/Container';\nimport Search from '../Search';\nimport SearchResult from '../SearchResult';\nimport Favorites from '../Favorites';\nimport TopCities from '../TopCities';\n\nconst SegmentWrapper = styled.div`\n  margin-bottom: 2.5rem;\n`;\n\nfunction Home() {\n  return (\n    <Container>\n      <SegmentWrapper>\n        <header>\n          <Search />\n        </header>\n      </SegmentWrapper>\n      <main>\n        <SegmentWrapper>\n          <SearchResult />\n        </SegmentWrapper>\n        <SegmentWrapper>\n          <Favorites />\n        </SegmentWrapper>\n        <SegmentWrapper>\n          <TopCities />\n        </SegmentWrapper>\n      </main>\n    </Container>\n  );\n}\n\nexport default Home;\n","import React, { useContext, useEffect } from 'react';\n// context\nimport WeatherContext from '../../context/WeatherContext';\n// hooks\nimport useForecast from '../../hooks/useForecast';\nimport useWeather from '../../hooks/useWeather';\n// components\nimport Container from '../../components/Container';\nimport Weather from '../../components/Weather';\n// etc\nimport { ACTION_TYPES } from '../../constants';\n\nfunction City(props) {\n  const { query, position } = props.history.location.state;\n\n  const [{ weather, favorites }, dispatch] = useContext(\n    WeatherContext.WeatherStateContext\n  );\n\n  const { fetchWeather } = useWeather();\n  const { forecast, isFetchingForecast } = useForecast(query);\n\n  useEffect(() => {\n    if (query) {\n      fetchWeather(query, ACTION_TYPES.SET_WEATHER_CURRENT);\n    }\n    if (position) {\n      fetchWeather(position, ACTION_TYPES.SET_WEATHER_CURRENT);\n    }\n  }, [fetchWeather, query, position]);\n\n  return (\n    <Container>\n      <Weather\n        weather={weather}\n        favorites={favorites}\n        onToggleFavorites={() =>\n          dispatch({ type: ACTION_TYPES.TOGGLE_FAVORITES, weather })\n        }\n      />\n    </Container>\n  );\n}\n\nexport default City;\n","import { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { WEATHER_BASE_URL } from '../constants';\n\nexport default function useForecast(query) {\n  const [forecast, setForecast] = useState([]);\n  const [isFetchingForecast, setIsFetchingForecast] = useState(false);\n  const [errorForecastMsg, setErrorForecastMsg] = useState('');\n\n  const fetchData = useCallback(async () => {\n    const params = {\n      access_key: process.env.REACT_APP_WEATHER_API_KEY,\n      forecast_days: 7,\n      query\n    };\n\n    try {\n      setIsFetchingForecast(true);\n      const { data } = await axios.get(`${WEATHER_BASE_URL}/forecast`, {\n        params\n      });\n      console.log(data);\n    } catch (error) {\n      setErrorForecastMsg(error);\n    } finally {\n      setIsFetchingForecast(false);\n    }\n  }, [query]);\n\n  useEffect(() => {\n    fetchData(query);\n  }, [fetchData, query]);\n\n  return {\n    forecast,\n    isFetchingForecast\n  };\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// context\nimport WeatherContext from './context/WeatherContext';\n// components\nimport Home from './containers/Home';\nimport City from './containers/City';\n// @todo add 404 catch all route\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL + '/'}>\n      <WeatherContext.WeatherStateProvider>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/details\" component={City} />\n        </Switch>\n      </WeatherContext.WeatherStateProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport whyDidYouRender from '@welldone-software/why-did-you-render';\n\nimport './index.css';\nimport App from './App';\n\nwhyDidYouRender(React, {\n  onlyLogs: true,\n  titleColor: 'green',\n  diffNameColor: 'darkturquoise'\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}